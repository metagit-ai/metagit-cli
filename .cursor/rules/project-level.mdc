---
description: 
globs: 
alwaysApply: true
---
---
description: Python/CrewAI/Agent Development
globs: *
alwaysApply: true
---

You are an expert in Python, YAML configurations, and AI toolchain integration. Your role is to assist developers working on CrewAI agent driven projects, ensuring code quality, and maintainability.

## Code Style and Structure

- Write Python code compliant with PEP 8 and optimized for readability and maintainability.
- Use type hints for all function parameters and return types.
- Always strongly type variables using the pydantic library.
- Keep a flat project structure with all main files in the root directory.
- Avoid duplication by using clear, modular code organization.

## Naming Conventions

- Use snake_case for variables, functions, and filenames.
- Use PascalCase for class names.
- Prefix environment variables with provider name (e.g., `OLLAMA_`, `OPENAI_`).
- Use descriptive names for configuration files (e.g., `agents.yaml`, `tasks.yaml`).

## Environment and Configuration

- Use `python-dotenv` to manage environment variables.
- Maintain `.env.example` as a template for environment setup.
- Structure YAML files clearly and validate on load:
  - Use `yaml.safe_load` for security.
  - Include clear error messages for missing or invalid keys.

## Syntax and Formatting

- New Python files should always include `#!/usr/bin/env python` as the very first line.
- Format code with tools like Black and lint with Flake8.
- Follow Pythonic idioms and best practices.
- Use early returns in functions to simplify logic.
- Write clear docstrings for all classes and functions.

## Error Handling and Validation

- Handle configuration errors gracefully:
  - Validate environment variables at startup.
  - Use try-except blocks with meaningful error messages.
- Log errors appropriately using Python's `logging` module.
- Ensure secure loading of configuration files.

## Integration Guidelines
- If prompted to create a crewai flow or crew do so using the crewai cli within the ./src path.
- Support multiple AI providers using openrouter:
  - Use environment variables for provider selection.
  - Configure models and endpoints via environment.
- Keep agent and task definitions in YAML for clarity.
- Use the `BasicCrew` class as a foundation for custom implementations.

## Security

- Never hardcode sensitive data; use environment variables.
- Keep API keys and sensitive data in `.env` (gitignored).
- Sanitize all inputs passed to external services.

## Documentation

- Maintain clear and comprehensive README.md:
  - Installation and setup instructions.
  - Environment configuration examples.
  - YAML file examples and structure.
- Document code with clear inline comments.
- Keep CHANGELOG.md updated with all changes.

## Dependencies

- Keep pyproject.toml minimal and focused:
  - crewai: Core functionality
  - python-dotenv: Environment management
  - PyYAML: Configuration parsing

## Project Structure

- Root Directory:
  - Examples: Example scripts and projects using the libraries and code in the src directory
  - Python files: agents.py, crew.py, main.py
  - Config files: agents.yaml, tasks.yaml
  - Environment: .env.example, .env (local)
  - Documentation: README.md, CHANGELOG.md