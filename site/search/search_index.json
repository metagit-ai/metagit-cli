{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Metagit","text":"<p>Metagit is situational awareness for developers and agents. It can make a sprawling multi-repo project feel more like a monorepo and provide concise information on the software stacks, generated artifacts, dependencies, and more.</p>"},{"location":"#about","title":"About","text":"<p>This tool is well suited for a number of scenarios including;</p> <ol> <li>At-a-glance view of a project's technical stacks, languages, external dependencies, and generated artifacts.</li> <li>Rapid pivoting between numerous git projects throughout the day while still maintaining a steady clip of productivity.</li> <li>Isolating outside dependencies that weaken the security and dependability of your software delivery pipelines.</li> <li>Automated documentation of a code's provenance.</li> <li>As a new contributor to a project or team, go from zero to first code commit in as little time as possible.</li> </ol> <p>Metagit aims to provide situational awareness for developers, SREs, AI agents, and engineers on the git projects they work in every day. It is meant to shed light on the numerous interconnected dependencies that comprise the whole of the entire solution being worked on in a single easily read, updated, and version controlled file.</p>"},{"location":"#audience","title":"Audience","text":"<p>This tool targets;</p> <ul> <li>DevOps Engineers</li> <li>Polyglot developers</li> <li>New team members</li> <li>Project Managers</li> <li>SREs</li> <li>Solution Engineers</li> <li>AI Agents (more to come!)</li> </ul>"},{"location":"#metagit-is-not","title":"Metagit is NOT...","text":""},{"location":"#an-sbom-tool","title":"...an SBOM Tool","text":"<p>SBOM output can be thousands of lines long and encompass all the software dependencies, their transitive dependencies, and more. This kind of data is too much for the simple need of situational awareness and AI integration. As such, a comprehensive SBOM report is overkill for the goals outlined above. The development roadmap may include the ability to read in SBOM manifests as a data source though!</p> <p>Metagit makes extensive use of CI library definitions (like go.mod, packages.json, requirements.txt, et cetera) for detection and boundary validations. Such files will be used to help determine technology stacks in use but not extensive versioning or other deep information.</p>"},{"location":"#a-git-client","title":"...a git Client","text":"<p>Despite the name this tool still requires git and all the trappings of a git hosting solution.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>This app accesses and saves project configuration metadata within the repository as a <code>.metagit.yml</code> file. This file follows a schema that can be read via the cli.</p> <p>If using this tool to manage several dozen git repos (aka. an umbrella repo) then everything within the configuration file can be manually updated. You can also attempt to automatically update the file using a mix of standard heuristics and AI driven workflows.</p>"},{"location":"#modes","title":"Modes","text":"<p>This application will have multiple modes of operation as described below.</p>"},{"location":"#workspace-mode","title":"Workspace Mode","text":"<p>This mode is the first planned release feature as an open source cli tool.</p> <p>In this mode users stitch together various repositories that comprise the components of a project into one workspace that can be loaded via vscode or accessed individually via fast context switching at the console.</p> <p>AKA Multi-repo as Monorepo</p> <p>In this mode you are using metagit as a means to externally track and work with multiple git projects as a whole. One top level 'umbrella' project has the only metagit definition file which contains definitions for all related git repos and local target folders in the current project. Optionally you then sync the project to your local workstation.</p> <p>The metagit configuration file is then be checked into version control as a stand-alone project.</p> <p>This mode is ideal for;</p> <ul> <li>Creating umbrella projects for new team members of a multi-repo project</li> <li>Individual power users that need to quickly pivot between several project repositories that comprise a larger team effort</li> <li>Keeping loosely coupled git projects grouped together to work on without having to deal with git submodules (yuk)</li> </ul>"},{"location":"#metadata-mode","title":"Metadata Mode","text":"<p>This mode uses the same config file that workspace mode employs but with additional information about the project's primary language, frameworks, and other situational awareness information you always wish you had at hand when diving into a new project. This mode can be used in tandem with workspace mode.</p> <p>To configure this metadata for a single project by hand would be easy. To do so for several dozen or even thousands of repos is a no small task. Towards that end, metagit will include detection heuristics to automate a good deal of this task. What cannot be done easily through code initially will be done with AI.</p> <p>NOTE This too will need to be actively monitored by other AI agents to convert into static code over time.</p> <p>In this mode, metagit would be used to answer questions such as;</p> <ul> <li>What other projects are related to this project?</li> <li>What application and development stacks does this project use?</li> <li>What external dependencies exist for this project?</li> <li>What artifacts does this project create?</li> <li>What branch strategy is employed?</li> <li>What version strategy is employed?</li> </ul> <p>External Dependencies are the devil! If you ever experienced a pipeline that suddenly fails due to a missing outside/external dependency you know exactly why they stink.</p>"},{"location":"#metadata-mode_1","title":"Metadata+ Mode","text":"<p>All the prior metadata is incredibly useful already. But if we add context around this then we are cooking with gas! If we setup basic organization boundaries like owned registries or github/gitlab groups we can then start looking for dangers such as outside dependencies.</p>"},{"location":"#enterprise-tbd","title":"Enterprise (TBD)","text":"<p>Enterprise mode is using metagit at scale.</p> <p>In this mode metagit connects to our enterprise SaaS offering to help mine the whole of your organization's code assets continuously.</p> <ul> <li>Imagine if you could mine your entire organization's copious amounts of code repos for the exact thing you need for your own project? </li> <li>How many times do wheels get recreated simply because you cannot find the artifact needed for your own project even though you know it must exist? </li> <li>How much time is wasted looking for a project using your language and framework to use as a starting point for your own efforts?</li> <li>How frustrated do you get when, after putting in days or weeks of effort to create something you find another internal project that does it twice as elegantly that was done 6 months ago by another team? Enterprise mode of metagit aims to target this issue head on.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>uv:</p> <p><code>uv tool install metagit-ai</code></p> <p>From source: To install metagit, clone the repository and build the project:</p> <pre><code>git clone https://github.com/metagit-ai/metagit-cli.git\ncd metagit-cli\n\n./configure.sh\ntask build\nuv tool install dist/metagit-*-py3-none-any.whl\n</code></pre> <p>docker:</p> <pre><code># Pull the latest version\ndocker pull ghcr.io/metagit-ai/metagit-cli:latest\n\n# Pull a specific version\ndocker pull ghcr.io/metagit-ai/metagit-cli:0.1.0\n\n# Run the CLI\ndocker run --rm ghcr.io/metagit-ai/metagit-cli:latest --help\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with metagit, initialize a new configuration in your Git repository:</p> <pre><code>metagit init\n</code></pre> <p>This creates a <code>metagit.yaml</code> configuration file and updates your <code>.gitignore</code> file.</p>"},{"location":"#subcommands","title":"Subcommands","text":""},{"location":"#init-initialize-repository","title":"<code>init</code> - Initialize Repository","text":"<p>Initialize a new metagit configuration in your current Git repository:</p> <pre><code>metagit init\n</code></pre> <p>This command will: - Check if the current directory is a Git repository - Create a <code>metagit.yaml</code> configuration file if it doesn't exist - Add <code>.metagit</code> to your <code>.gitignore</code> file</p>"},{"location":"#appconfig-application-configuration","title":"<code>appconfig</code> - Application Configuration","text":"<p>Manage metagit's application-level configuration:</p> <pre><code># Show current application configuration\nmetagit appconfig show\n\n# Create default application config\nmetagit appconfig create\n\n# Get a specific configuration value\nmetagit appconfig get &lt;key&gt;\n\n# Validate configuration file\nmetagit appconfig validate\n\n# Generate JSON schema for configuration\nmetagit appconfig schema\n\n# Show configuration information\nmetagit appconfig info\n</code></pre>"},{"location":"#config-project-configuration","title":"<code>config</code> - Project Configuration","text":"<p>Manage project-specific (local git project) metagit configuration:</p> <pre><code># Show current project configuration\nmetagit config show\n\n# Create new metagit config files\nmetagit config create\n\n# Validate metagit configuration\nmetagit config validate\n\n# Generate JSON schema for MetagitConfig\nmetagit config schema\n\n# Display project configuration information\nmetagit config info\n\n# Manage git provider plugins\nmetagit config providers\n</code></pre>"},{"location":"#detect-repository-detection","title":"<code>detect</code> - Repository Detection","text":"<p>Analyze and detect project characteristics:</p> <pre><code># Basic repository detection\nmetagit detect repo\n\n# Comprehensive repository analysis with MetagitConfig generation\nmetagit detect repository\n</code></pre> <p>The detection system analyzes your repository to automatically identify: - Programming languages and frameworks - Build tools and package managers - CI/CD configurations - Project structure and dependencies</p>"},{"location":"#project-project-management","title":"<code>project</code> - Project Management","text":"<p>Manage projects within workspaces:</p> <pre><code># List current project configuration\nmetagit project list\n\n# Select a project repository to work on\nmetagit project select\n\n# Sync project within workspace\nmetagit project sync\n\n# Repository-specific operations\nmetagit project repo &lt;subcommand&gt;\n</code></pre> <p>Options: - <code>-c, --config</code>: Path to metagit definition file - <code>-p, --project</code>: Specific project within workspace</p>"},{"location":"#record-record-management","title":"<code>record</code> - Record Management","text":"<p>Manage metagit records with various storage backends:</p> <pre><code># Create a record from metagit configuration\nmetagit record create\n\n# Show record(s)\nmetagit record show\n\n# Search records\nmetagit record search &lt;query&gt;\n\n# Update an existing record\nmetagit record update\n\n# Delete a record\nmetagit record delete\n\n# Export record to file\nmetagit record export\n\n# Import record from file\nmetagit record import\n\n# Show storage statistics\nmetagit record stats\n</code></pre> <p>Storage options: - <code>--storage-type</code>: Choose between <code>local</code> or <code>opensearch</code> - <code>--storage-path</code>: Path for local storage - <code>--opensearch-*</code>: OpenSearch connection parameters</p>"},{"location":"#workspace-workspace-management","title":"<code>workspace</code> - Workspace Management","text":"<p>Manage multi-repository workspaces:</p> <pre><code># Select project repository to work on\nmetagit workspace select\n</code></pre>"},{"location":"#info-configuration-information","title":"<code>info</code> - Configuration Information","text":"<p>Display current configuration:</p> <pre><code>metagit info\n</code></pre>"},{"location":"#version-version-information","title":"<code>version</code> - Version Information","text":"<p>Get application version:</p> <pre><code>metagit version\n</code></pre>"},{"location":"#global-options","title":"Global Options","text":"<p>Available for all commands:</p> <ul> <li><code>--version</code>: Show version and exit</li> <li><code>-c, --config</code>: Path to configuration file</li> <li><code>--debug / --no-debug</code>: Enable/disable debug mode</li> <li><code>--verbose / --no-verbose</code>: Enable/disable verbose output</li> <li><code>-h, --help</code>: Show help message</li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<p>The default configuration file is <code>metagit.config.yaml</code>, which can be customized to suit your project's needs.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request for any enhancements or bug fixes.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#development","title":"Development","text":""},{"location":"#links","title":"Links","text":""},{"location":"#mcp-servers","title":"MCP Servers","text":"<p>Sequential Thinking</p>"},{"location":"cli_reference/","title":"CLI Reference","text":"<p>This page contains the auto-generated documentation for the <code>metagit</code> command-line interface.</p>"},{"location":"cli_reference/#metagit","title":"metagit","text":"<p>Metagit CLI: A multi-purpose CLI tool with YAML configuration.</p> <p>Usage:</p> <pre><code>metagit [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version                 Show the version and exit.\n  -c, --config TEXT         Path to the configuration file\n  --debug / --no-debug      Enable or disable debug mode\n  --verbose / --no-verbose  Enable or disable verbose output\n  -h, --help                Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#appconfig","title":"appconfig","text":"<p>Application configuration subcommands</p> <p>Usage:</p> <pre><code>metagit appconfig [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create","title":"create","text":"<p>Create default application config</p> <p>Usage:</p> <pre><code>metagit appconfig create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to save configuration file (default: ~/.config/metagit/config.yml).\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#get","title":"get","text":"<p>Get a value from the application configuration.</p> <p>Example - show all keys in the providers section:</p> <p>metagit appconfig get --name config.providers --show-keys</p> <p>Example - show all values in the providers section:</p> <p>metagit appconfig get --name config.providers</p> <p>Usage:</p> <pre><code>metagit appconfig get [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --name TEXT    Appconfig element to target\n  --show-keys    If the element is a dictionary, show all key names. If it is a list, show all name attributes\n  --output TEXT  Output format (json/yaml)\n  -h, --help     Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#info","title":"info","text":"<p>Information about the application configuration.</p> <p>Usage:</p> <pre><code>metagit appconfig info [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#schema","title":"schema","text":"<p>Generate a JSON schema for the AppConfig class and write it to a file.</p> <p>Usage:</p> <pre><code>metagit appconfig schema [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --output-path TEXT  Path to output the JSON schema file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show","title":"show","text":"<p>Show current configuration</p> <p>Usage:</p> <pre><code>metagit appconfig show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#validate","title":"validate","text":"<p>Validate a configuration file</p> <p>Usage:</p> <pre><code>metagit appconfig validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#config","title":"config","text":"<p>Configuration subcommands</p> <p>Usage:</p> <pre><code>metagit config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the metagit configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create_1","title":"create","text":"<p>Create metagit config files</p> <p>Usage:</p> <pre><code>metagit config create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --output-path TEXT  Path to the metagit configuration file\n  --name TEXT         Project name\n  --description TEXT  Project description\n  --url TEXT          Project URL\n  --kind TEXT         Project kind\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#info_1","title":"info","text":"<p>Display information about the local project configuration.</p> <p>Usage:</p> <pre><code>metagit config info [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#providers","title":"providers","text":"<p>Manage git provider plugin configuration.</p> <p>Usage:</p> <pre><code>metagit config providers [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --show               Show current provider configuration.\n  --enable-github      Enable GitHub provider.\n  --disable-github     Disable GitHub provider.\n  --enable-gitlab      Enable GitLab provider.\n  --disable-gitlab     Disable GitLab provider.\n  --github-token TEXT  Set GitHub API token.\n  --gitlab-token TEXT  Set GitLab API token.\n  --github-url TEXT    Set GitHub API base URL (for GitHub Enterprise).\n  --gitlab-url TEXT    Set GitLab API base URL (for self-hosted GitLab).\n  --config-path TEXT   Path to configuration file (default: ~/.config/metagit/config.yml).\n  -h, --help           Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#schema_1","title":"schema","text":"<p>Generate a JSON schema for the MetagitConfig class and write it to a file.</p> <p>Usage:</p> <pre><code>metagit config schema [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --output-path TEXT  Path to output the JSON schema file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show_1","title":"show","text":"<p>Show metagit configuration</p> <p>Usage:</p> <pre><code>metagit config show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#validate_1","title":"validate","text":"<p>Validate metagit configuration</p> <p>Usage:</p> <pre><code>metagit config validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#detect","title":"detect","text":"<p>Detection subcommands</p> <p>Usage:</p> <pre><code>metagit detect [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repo","title":"repo","text":"<p>Detect the codebase.</p> <p>Usage:</p> <pre><code>metagit detect repo [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --repo-path TEXT  Path to the git repository to analyze.  [default: ./]\n  --output TEXT     Output format.  [default: yaml]\n  -h, --help        Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repository","title":"repository","text":"<p>Comprehensive repository analysis and MetagitConfig generation using DetectionManager.</p> <p>Usage:</p> <pre><code>metagit detect repository [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --path TEXT                     Path to local repository to analyze.\n  --url TEXT                      URL of remote git repository to clone and analyze.\n  --output [summary|yaml|json|record|metagit|metagitconfig|all]\n                                  Output format. Defaults to 'summary'\n  --save                          Save the generated configuration to .metagit.yml in the repository path.\n  --temp-dir TEXT                 Temporary directory for cloning remote repositories.\n  --github-token TEXT             GitHub API token for fetching repository metrics (overrides AppConfig).\n  --gitlab-token TEXT             GitLab API token for fetching repository metrics (overrides AppConfig).\n  --github-url TEXT               GitHub API base URL (for GitHub Enterprise, overrides AppConfig).\n  --gitlab-url TEXT               GitLab API base URL (for self-hosted GitLab, overrides AppConfig).\n  --use-app-config                Use AppConfig for provider configuration (default: True).\n  --config-path TEXT              Path to the MetagitConfig file to save.\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#info_2","title":"info","text":"<p>Display the current configuration.</p> <p>Usage:</p> <pre><code>metagit info [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#init","title":"init","text":"<p>Initialize local metagit environment by creating .metagit.yml and updating .gitignore</p> <p>Usage:</p> <pre><code>metagit init [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -k, --kind [application|umbrella]\n                                  Project kind\n  -f, --force                     Force overwrite of existing .metagit.yml file\n  -s, --skip-gitignore            Skip updating .gitignore file\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#project","title":"project","text":"<p>Project subcommands</p> <p>Usage:</p> <pre><code>metagit project [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -c, --config TEXT   Path to the metagit definition file\n  -p, --project TEXT  Project within workspace to operate on\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#list","title":"list","text":"<p>List the current project configuration in YAML format</p> <p>Usage:</p> <pre><code>metagit project list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repo_1","title":"repo","text":"<p>Repository subcommands</p> <p>Usage:</p> <pre><code>metagit project repo [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#add","title":"add","text":"<p>Add a repository to the current project</p> <p>Usage:</p> <pre><code>metagit project repo add [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -n, --name TEXT                 Repository name\n  -d, --description TEXT          Repository description\n  --kind [monorepo|umbrella|application|gitops|infrastructure|service|library|website|other|docker_image|repository|cli]\n                                  Project kind\n  --ref TEXT                      Reference in the current project for the target project\n  --path TEXT                     Local project path\n  --url TEXT                      Repository URL\n  --sync / --no-sync              Sync setting\n  --language TEXT                 Programming language\n  --language-version TEXT         Language version\n  --package-manager TEXT          Package manager\n  --frameworks TEXT               Frameworks used (can be specified multiple times)\n  --prompt                        Use interactive prompts instead of command line parameters\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select","title":"select","text":"<p>Select project repo to work on</p> <p>Usage:</p> <pre><code>metagit project repo select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select_1","title":"select","text":"<p>Shortcut: Uses 'project repo select' to select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit project select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#sync","title":"sync","text":"<p>Sync project within workspace</p> <p>Usage:</p> <pre><code>metagit project sync [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#record","title":"record","text":"<p>Record management subcommands</p> <p>Usage:</p> <pre><code>metagit record [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --storage-type [local|opensearch]\n                                  Storage backend type for records\n  --storage-path TEXT             Path for local storage (used when storage-type is 'local')\n  --opensearch-hosts TEXT         OpenSearch hosts (comma-separated, used when storage-type is 'opensearch')\n  --opensearch-index TEXT         OpenSearch index name (used when storage-type is 'opensearch')\n  --opensearch-username TEXT      OpenSearch username (used when storage-type is 'opensearch')\n  --opensearch-password TEXT      OpenSearch password (used when storage-type is 'opensearch')\n  --opensearch-use-ssl            Use SSL for OpenSearch connection\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create_2","title":"create","text":"<p>Create a record from metagit configuration</p> <p>Usage:</p> <pre><code>metagit record create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT        Path to the metagit configuration file\n  --detection-source TEXT   Source of the detection\n  --detection-version TEXT  Version of the detection system\n  --output-file TEXT        Save record to file (optional)\n  -h, --help                Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#delete","title":"delete","text":"<p>Delete a record</p> <p>Usage:</p> <pre><code>metagit record delete [OPTIONS] RECORD_ID\n</code></pre> <p>Options:</p> <pre><code>  --force     Force deletion without confirmation\n  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#export","title":"export","text":"<p>Export a record to file</p> <p>Usage:</p> <pre><code>metagit record export [OPTIONS] RECORD_ID OUTPUT_FILE\n</code></pre> <p>Options:</p> <pre><code>  --format [yaml|json]  Export format\n  -h, --help            Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#import","title":"import","text":"<p>Import a record from file</p> <p>Usage:</p> <pre><code>metagit record import [OPTIONS] INPUT_FILE\n</code></pre> <p>Options:</p> <pre><code>  --detection-source TEXT   Override detection source\n  --detection-version TEXT  Override detection version\n  -h, --help                Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#search","title":"search","text":"<p>Search records</p> <p>Usage:</p> <pre><code>metagit record search [OPTIONS] QUERY\n</code></pre> <p>Options:</p> <pre><code>  --page INTEGER              Page number for pagination\n  --size INTEGER              Number of records per page\n  --format [yaml|json|table]  Output format\n  -h, --help                  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show_2","title":"show","text":"<p>Show record(s)</p> <p>Usage:</p> <pre><code>metagit record show [OPTIONS] [RECORD_ID]\n</code></pre> <p>Options:</p> <pre><code>  --format [yaml|json]  Output format\n  -h, --help            Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#stats","title":"stats","text":"<p>Show record storage statistics</p> <p>Usage:</p> <pre><code>metagit record stats [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#update","title":"update","text":"<p>Update an existing record</p> <p>Usage:</p> <pre><code>metagit record update [OPTIONS] RECORD_ID\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT        Path to the updated metagit configuration file\n  --detection-source TEXT   Updated detection source\n  --detection-version TEXT  Updated detection version\n  -h, --help                Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#version","title":"version","text":"<p>Get the application version.</p> <p>Usage:</p> <pre><code>metagit version [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#workspace","title":"workspace","text":"<p>Workspace subcommands</p> <p>Usage:</p> <pre><code>metagit workspace [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --config TEXT  Path to the metagit definition file\n  -h, --help     Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select_2","title":"select","text":"<p>Select project repo to work on</p> <p>Usage:</p> <pre><code>metagit workspace select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -p, --project TEXT  Project within workspace to select target paths from\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"development/","title":"Metagit Development Guide","text":"<p>Upon making changes run the following to validate everything before submitting a PR</p> <pre><code>task format lint:fix test\n</code></pre>"},{"location":"record_cli_reference/","title":"Record Management CLI Reference","text":"<p>The <code>metagit record</code> command group provides comprehensive record management functionality using the <code>MetagitRecordManager</code> with support for multiple storage backends.</p>"},{"location":"record_cli_reference/#overview","title":"Overview","text":"<p>The record management system allows you to: - Create records from existing metagit configuration files - Store records in local files or OpenSearch - Search, update, and delete records - Export and import records - View statistics and analytics</p>"},{"location":"record_cli_reference/#storage-backends","title":"Storage Backends","text":""},{"location":"record_cli_reference/#local-file-storage-default","title":"Local File Storage (Default)","text":"<p>Records are stored as JSON files in a local directory with an index file for quick lookups.</p>"},{"location":"record_cli_reference/#opensearch-storage","title":"OpenSearch Storage","text":"<p>Records are stored in an OpenSearch index for scalable, searchable storage.</p>"},{"location":"record_cli_reference/#command-reference","title":"Command Reference","text":""},{"location":"record_cli_reference/#global-options","title":"Global Options","text":"<p>All record commands support these global options:</p> <ul> <li><code>--storage-type</code>: Storage backend type (<code>local</code> or <code>opensearch</code>)</li> <li><code>--storage-path</code>: Path for local storage (default: <code>./records</code>)</li> <li><code>--opensearch-hosts</code>: OpenSearch hosts (comma-separated, default: <code>localhost:9200</code>)</li> <li><code>--opensearch-index</code>: OpenSearch index name (default: <code>metagit-records</code>)</li> <li><code>--opensearch-username</code>: OpenSearch username</li> <li><code>--opensearch-password</code>: OpenSearch password</li> <li><code>--opensearch-use-ssl</code>: Use SSL for OpenSearch connection</li> </ul>"},{"location":"record_cli_reference/#commands","title":"Commands","text":""},{"location":"record_cli_reference/#metagit-record-create","title":"<code>metagit record create</code>","text":"<p>Create a record from a metagit configuration file.</p> <p>Options: - <code>--config-path</code>: Path to the metagit configuration file (default: <code>.metagit.yml</code>) - <code>--detection-source</code>: Source of the detection (default: <code>local</code>) - <code>--detection-version</code>: Version of the detection system (default: <code>1.0.0</code>) - <code>--output-file</code>: Save record to file (optional)</p> <p>Examples:</p> <pre><code># Create a record from the current directory's .metagit.yml\nmetagit record create\n\n# Create a record with custom detection source\nmetagit record create --detection-source github --detection-version 2.0.0\n\n# Create a record and save to file\nmetagit record create --output-file my-record.yml\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-show","title":"<code>metagit record show</code>","text":"<p>Show record(s) in various formats.</p> <p>Arguments: - <code>record_id</code>: Optional record ID to show specific record</p> <p>Options: - <code>--format</code>: Output format (<code>yaml</code> or <code>json</code>, default: <code>yaml</code>)</p> <p>Examples:</p> <pre><code># List all records\nmetagit record show\n\n# Show specific record\nmetagit record show 1\n\n# Show record in JSON format\nmetagit record show 1 --format json\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-search","title":"<code>metagit record search</code>","text":"<p>Search records with optional filters and pagination.</p> <p>Arguments: - <code>query</code>: Search query string</p> <p>Options: - <code>--page</code>: Page number for pagination (default: 1) - <code>--size</code>: Number of records per page (default: 20) - <code>--format</code>: Output format (<code>yaml</code>, <code>json</code>, or <code>table</code>, default: <code>table</code>)</p> <p>Examples:</p> <pre><code># Search for records containing \"python\"\nmetagit record search python\n\n# Search with pagination\nmetagit record search web --page 2 --size 10\n\n# Search with YAML output\nmetagit record search api --format yaml\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-update","title":"<code>metagit record update</code>","text":"<p>Update an existing record.</p> <p>Arguments: - <code>record_id</code>: ID of the record to update</p> <p>Options: - <code>--config-path</code>: Path to the updated metagit configuration file (default: <code>.metagit.yml</code>) - <code>--detection-source</code>: Updated detection source - <code>--detection-version</code>: Updated detection version</p> <p>Examples:</p> <pre><code># Update record with new config file\nmetagit record update 1 --config-path updated-config.yml\n\n# Update only detection source\nmetagit record update 1 --detection-source github\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-delete","title":"<code>metagit record delete</code>","text":"<p>Delete a record.</p> <p>Arguments: - <code>record_id</code>: ID of the record to delete</p> <p>Options: - <code>--force</code>: Force deletion without confirmation</p> <p>Examples:</p> <pre><code># Delete with confirmation\nmetagit record delete 1\n\n# Force delete without confirmation\nmetagit record delete 1 --force\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-export","title":"<code>metagit record export</code>","text":"<p>Export a record to file.</p> <p>Arguments: - <code>record_id</code>: ID of the record to export - <code>output_file</code>: Output file path</p> <p>Options: - <code>--format</code>: Export format (<code>yaml</code> or <code>json</code>, default: <code>yaml</code>)</p> <p>Examples:</p> <pre><code># Export record to YAML\nmetagit record export 1 my-record.yml\n\n# Export record to JSON\nmetagit record export 1 my-record.json --format json\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-import","title":"<code>metagit record import</code>","text":"<p>Import a record from file.</p> <p>Arguments: - <code>input_file</code>: Input file path</p> <p>Options: - <code>--detection-source</code>: Override detection source - <code>--detection-version</code>: Override detection version</p> <p>Examples:</p> <pre><code># Import record from file\nmetagit record import my-record.yml\n\n# Import with custom detection source\nmetagit record import my-record.yml --detection-source imported --detection-version 2.0.0\n</code></pre>"},{"location":"record_cli_reference/#metagit-record-stats","title":"<code>metagit record stats</code>","text":"<p>Show record storage statistics.</p> <p>Examples:</p> <pre><code># Show statistics\nmetagit record stats\n</code></pre>"},{"location":"record_cli_reference/#usage-examples","title":"Usage Examples","text":""},{"location":"record_cli_reference/#basic-workflow","title":"Basic Workflow","text":"<ol> <li> <p>Create a record from configuration: <code>bash    metagit record create --config-path .metagit.yml</code></p> </li> <li> <p>List all records: <code>bash    metagit record show</code></p> </li> <li> <p>Search for specific records: <code>bash    metagit record search python --format table</code></p> </li> <li> <p>Update a record: <code>bash    metagit record update 1 --detection-source github</code></p> </li> <li> <p>Export a record: <code>bash    metagit record export 1 exported-record.yml</code></p> </li> </ol>"},{"location":"record_cli_reference/#using-opensearch-backend","title":"Using OpenSearch Backend","text":"<pre><code># Create record using OpenSearch storage\nmetagit record --storage-type opensearch \\\n  --opensearch-hosts \"localhost:9200\" \\\n  --opensearch-index \"metagit-records\" \\\n  create\n\n# Search records in OpenSearch\nmetagit record --storage-type opensearch search \"api\"\n</code></pre>"},{"location":"record_cli_reference/#using-local-storage-with-custom-path","title":"Using Local Storage with Custom Path","text":"<pre><code># Use custom local storage path\nmetagit record --storage-path /path/to/records create\n\n# List records from custom path\nmetagit record --storage-path /path/to/records show\n</code></pre>"},{"location":"record_cli_reference/#error-handling","title":"Error Handling","text":"<p>The record commands provide detailed error messages for common issues:</p> <ul> <li>Missing configuration file: Use <code>--config-path</code> to specify the correct path</li> <li>OpenSearch connection issues: Check host, port, and authentication settings</li> <li>Permission errors: Ensure write access to storage directories</li> <li>Invalid record ID: Use <code>metagit record show</code> to list valid record IDs</li> </ul>"},{"location":"record_cli_reference/#integration-with-existing-workflows","title":"Integration with Existing Workflows","text":"<p>The record management system integrates seamlessly with existing metagit workflows:</p> <ol> <li>Detection Pipeline: Records can be created automatically during detection</li> <li>Configuration Management: Records are created from existing <code>.metagit.yml</code> files</li> <li>CI/CD Integration: Records can be exported/imported for deployment tracking</li> <li>Analytics: Statistics provide insights into project patterns and trends</li> </ol>"},{"location":"record_cli_reference/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive detection sources: Use meaningful values like <code>github</code>, <code>gitlab</code>, <code>local</code>, <code>ci-pipeline</code></li> <li>Version your detection system: Track detection algorithm versions for reproducibility</li> <li>Regular backups: Export important records to files for backup</li> <li>Consistent naming: Use consistent project names and descriptions</li> <li>Monitor storage: Use <code>metagit record stats</code> to monitor record growth</li> </ol>"},{"location":"record_cli_reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"record_cli_reference/#common-issues","title":"Common Issues","text":"<ol> <li>\"No storage backend configured\": Ensure you're using a valid storage type</li> <li>\"Record not found\": Check the record ID with <code>metagit record show</code></li> <li>\"OpenSearch connection failed\": Verify OpenSearch is running and accessible</li> <li>\"Permission denied\": Check file/directory permissions for local storage</li> </ol>"},{"location":"record_cli_reference/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed logging:</p> <pre><code>metagit --debug record show\n</code></pre>"},{"location":"record_cli_reference/#verbose-output","title":"Verbose Output","text":"<p>Enable verbose output for more information:</p> <pre><code>metagit --verbose record create\n</code></pre>"},{"location":"record_conversion/","title":"MetagitRecord Conversion Methods","text":"<p>This document describes the fast conversion methods between <code>MetagitRecord</code> and <code>MetagitConfig</code> data structures using the latest Pydantic best practices.</p>"},{"location":"record_conversion/#overview","title":"Overview","text":"<p>The <code>MetagitRecord</code> class provides efficient conversion methods to transform data between the record format (which includes detection-specific data) and the configuration format (which contains only project configuration data).</p>"},{"location":"record_conversion/#key-features","title":"Key Features","text":"<ul> <li>Automatic Field Detection: Uses Pydantic's field introspection to automatically detect compatible fields</li> <li>No Manual Field Lists: Eliminates the need to maintain manual field mappings</li> <li>Fast Conversion: Uses Pydantic's optimized validation pipeline</li> <li>Type Safety: Full type hints and validation</li> <li>Memory Efficient: Minimal object copying with reference preservation</li> <li>Round-trip Safe: Maintains data integrity through conversions</li> <li>Detection Data Support: Handles detection-specific fields appropriately</li> <li>Future-Proof: Automatically adapts to model schema changes</li> </ul>"},{"location":"record_conversion/#methods","title":"Methods","text":""},{"location":"record_conversion/#to_metagit_configexclude_detection_fields-bool-true-metagitconfig","title":"<code>to_metagit_config(exclude_detection_fields: bool = True) -&gt; MetagitConfig</code>","text":"<p>Converts a <code>MetagitRecord</code> to a <code>MetagitConfig</code> using automatic field detection.</p> <p>This method automatically identifies compatible fields between the models using Pydantic's field introspection, eliminating the need for manual field lists.</p> <p>Parameters: - <code>exclude_detection_fields</code> (bool): Whether to exclude detection-specific fields (default: True)</p> <p>Returns: - <code>MetagitConfig</code>: A new configuration instance with shared fields</p> <p>Example:</p> <pre><code>from metagit.core.record.models import MetagitRecord\nfrom metagit.core.config.models import MetagitConfig\n\n# Create a record with detection data\nrecord = MetagitRecord(\n    name=\"my-project\",\n    description=\"A test project\",\n    detection_source=\"github\",\n    detection_version=\"1.0.0\",\n    branch=\"main\",\n    checksum=\"abc123\",\n)\n\n# Convert to config (excludes detection fields)\nconfig = record.to_metagit_config()\nprint(config.name)  # \"my-project\"\nprint(hasattr(config, 'detection_source'))  # False\n</code></pre>"},{"location":"record_conversion/#from_metagit_configconfig-metagitconfig-detection_source-str-local-detection_version-str-100-additional_detection_data-optionaldict-none-metagitrecord","title":"<code>from_metagit_config(config: MetagitConfig, detection_source: str = \"local\", detection_version: str = \"1.0.0\", additional_detection_data: Optional[dict] = None) -&gt; MetagitRecord</code>","text":"<p>Converts a <code>MetagitConfig</code> to a <code>MetagitRecord</code> by adding detection-specific fields.</p> <p>This method preserves all configuration fields while adding detection metadata.</p> <p>Parameters: - <code>config</code> (MetagitConfig): The configuration to convert - <code>detection_source</code> (str): Source of the detection (default: \"local\") - <code>detection_version</code> (str): Version of the detection system (default: \"1.0.0\") - <code>additional_detection_data</code> (dict, optional): Additional detection-specific data</p> <p>Returns: - <code>MetagitRecord</code>: A new record instance with detection data</p> <p>Example:</p> <pre><code>from metagit.core.config.models import MetagitConfig\nfrom metagit.core.record.models import MetagitRecord\n\n# Create a config\nconfig = MetagitConfig(\n    name=\"my-project\",\n    description=\"A test project\",\n)\n\n# Convert to record with detection data\nrecord = MetagitRecord.from_metagit_config(\n    config,\n    detection_source=\"github\",\n    detection_version=\"2.0.0\",\n    additional_detection_data={\n        \"branch\": \"main\",\n        \"checksum\": \"abc123\",\n        \"metrics\": Metrics(stars=100, forks=10, ...),\n    }\n)\n</code></pre>"},{"location":"record_conversion/#get_detection_summary-dict","title":"<code>get_detection_summary() -&gt; dict</code>","text":"<p>Returns a summary of detection-specific data for quick analysis.</p> <p>Returns: - <code>dict</code>: Summary of detection data including source, version, and key metrics</p>"},{"location":"record_conversion/#get_field_differences-dict","title":"<code>get_field_differences() -&gt; dict</code>","text":"<p>Returns detailed information about field differences between MetagitRecord and MetagitConfig.</p> <p>This method helps understand what fields are unique to each model and what fields are shared.</p> <p>Returns: - <code>dict</code>: Field difference analysis including common fields, record-only fields, and statistics</p>"},{"location":"record_conversion/#get_compatible_fields-setstr","title":"<code>get_compatible_fields() -&gt; set[str]</code>","text":"<p>Returns the set of fields that are compatible between MetagitRecord and MetagitConfig.</p> <p>Returns: - <code>set[str]</code>: Field names that exist in both models</p> <p>Example:</p> <pre><code>summary = record.get_detection_summary()\nprint(summary)\n# {\n#     \"detection_source\": \"github\",\n#     \"detection_version\": \"2.0.0\",\n#     \"detection_timestamp\": \"2025-07-07T17:12:49.195681\",\n#     \"current_branch\": \"main\",\n#     \"checksum\": \"abc123\",\n#     \"metrics\": {\n#         \"stars\": 150,\n#         \"forks\": 25,\n#         \"open_issues\": 8,\n#         \"contributors\": 12\n#     },\n#     \"metadata\": {\n#         \"has_ci\": True,\n#         \"has_tests\": True,\n#         \"has_docs\": True,\n#         \"has_docker\": True,\n#         \"has_iac\": True\n#     }\n# }\n</code></pre>"},{"location":"record_conversion/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"record_conversion/#conversion-speed","title":"Conversion Speed","text":"<ul> <li>1000 round-trip conversions: ~7ms (0.01ms per conversion)</li> <li>Complex nested objects: Preserved with minimal overhead</li> <li>Memory usage: Efficient with reference preservation</li> </ul>"},{"location":"record_conversion/#optimization-techniques","title":"Optimization Techniques","text":"<ol> <li>Pydantic's field introspection: Automatically detects compatible fields</li> <li>C-optimized validation: Leverages compiled validation</li> <li>Field filtering: Only processes relevant fields</li> <li>Minimal serialization: Uses <code>exclude_none=True</code> and <code>exclude_defaults=True</code></li> <li>Reference preservation: Avoids deep copying of nested objects</li> </ol>"},{"location":"record_conversion/#field-mapping","title":"Field Mapping","text":"<p>The conversion methods automatically detect field compatibility using Pydantic's field introspection.</p>"},{"location":"record_conversion/#automatic-field-detection","title":"Automatic Field Detection","text":"<pre><code># Get field differences\ndifferences = MetagitRecord.get_field_differences()\nprint(f\"Common fields: {differences['common_field_count']}\")\nprint(f\"Record-only fields: {len(differences['record_only_fields'])}\")\n\n# Get compatible fields\ncompatible_fields = MetagitRecord.get_compatible_fields()\nprint(f\"Compatible fields: {len(compatible_fields)}\")\n</code></pre>"},{"location":"record_conversion/#metagitconfig-fields-automatically-preserved","title":"MetagitConfig Fields (Automatically Preserved)","text":"<p>All fields that exist in both models are automatically preserved during conversion.</p>"},{"location":"record_conversion/#detection-specific-fields-automatically-excluded","title":"Detection-Specific Fields (Automatically Excluded)","text":"<p>Fields unique to MetagitRecord are automatically excluded during conversion to MetagitConfig.</p>"},{"location":"record_conversion/#error-handling","title":"Error Handling","text":"<p>The conversion methods handle various error scenarios gracefully:</p> <pre><code>try:\n    config = record.to_metagit_config()\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"record_conversion/#best-practices","title":"Best Practices","text":""},{"location":"record_conversion/#1-use-type-hints","title":"1. Use Type Hints","text":"<pre><code>from typing import Optional\nfrom metagit.core.record.models import MetagitRecord\nfrom metagit.core.config.models import MetagitConfig\n\ndef process_record(record: MetagitRecord) -&gt; MetagitConfig:\n    return record.to_metagit_config()\n</code></pre>"},{"location":"record_conversion/#2-handle-optional-fields","title":"2. Handle Optional Fields","text":"<pre><code># Check for optional fields before conversion\nif record.metrics:\n    print(f\"Project has {record.metrics.stars} stars\")\n\nconfig = record.to_metagit_config()\n</code></pre>"},{"location":"record_conversion/#3-use-detection-summary-for-quick-analysis","title":"3. Use Detection Summary for Quick Analysis","text":"<pre><code>summary = record.get_detection_summary()\nif summary.get(\"metrics\", {}).get(\"stars\", 0) &gt; 100:\n    print(\"This is a popular project!\")\n</code></pre>"},{"location":"record_conversion/#4-preserve-detection-data-when-needed","title":"4. Preserve Detection Data When Needed","text":"<pre><code># For debugging or analysis, you might want to keep detection data\n# Note: This requires a custom MetagitConfig subclass that supports these fields\n</code></pre>"},{"location":"record_conversion/#integration-examples","title":"Integration Examples","text":""},{"location":"record_conversion/#with-record-manager","title":"With Record Manager","text":"<pre><code>from metagit.core.record.manager import MetagitRecordManager\n\nmanager = MetagitRecordManager()\nrecord = await manager.get_record(\"record-id\")\n\n# Convert to config for configuration operations\nconfig = record.to_metagit_config()\n</code></pre>"},{"location":"record_conversion/#with-configuration-manager","title":"With Configuration Manager","text":"<pre><code>from metagit.core.config.manager import MetagitConfigManager\n\nconfig_manager = MetagitConfigManager()\nconfig = config_manager.load_config()\n\n# Convert to record for storage\nrecord = MetagitRecord.from_metagit_config(\n    config,\n    detection_source=\"local\",\n    detection_version=\"1.0.0\"\n)\n</code></pre>"},{"location":"record_conversion/#with-api-endpoints","title":"With API Endpoints","text":"<pre><code>from fastapi import APIRouter\nfrom metagit.core.record.models import MetagitRecord\n\nrouter = APIRouter()\n\n@router.get(\"/config/{record_id}\")\nasync def get_config_from_record(record_id: str):\n    record = await get_record(record_id)\n    config = record.to_metagit_config()\n    return config\n</code></pre>"},{"location":"record_conversion/#testing","title":"Testing","text":"<p>Comprehensive tests are available in <code>tests/test_record_conversion.py</code>:</p> <pre><code>python -m unittest tests.test_record_conversion -v\n</code></pre> <p>The test suite covers: - Basic conversion functionality - Round-trip conversion integrity - Performance benchmarks - Complex nested object handling - Error scenarios - Detection summary functionality</p>"},{"location":"record_conversion/#migration-guide","title":"Migration Guide","text":""},{"location":"record_conversion/#from-manual-field-lists","title":"From Manual Field Lists","text":"<p>Before:</p> <pre><code># Manual field list definition\ndetection_fields = {\n    \"branch\", \"checksum\", \"last_updated\", \"branches\", \"metrics\",\n    \"metadata\", \"language_version\", \"domain\", \"detection_timestamp\",\n    \"detection_source\", \"detection_version\"\n}\nmodel_data = record.model_dump(exclude=detection_fields)\nconfig = MetagitConfig.model_validate(model_data)\n</code></pre> <p>After:</p> <pre><code># Automatic field detection\nconfig = record.to_metagit_config()\n</code></pre>"},{"location":"record_conversion/#from-manual-conversion","title":"From Manual Conversion","text":"<p>Before:</p> <pre><code># Manual field copying\nconfig_data = {\n    \"name\": record.name,\n    \"description\": record.description,\n    \"url\": record.url,\n    # ... many more fields\n}\nconfig = MetagitConfig(**config_data)\n</code></pre> <p>After:</p> <pre><code># Automatic conversion\nconfig = record.to_metagit_config()\n</code></pre>"},{"location":"record_conversion/#from-dictionary-operations","title":"From Dictionary Operations","text":"<p>Before:</p> <pre><code># Manual dictionary filtering\nrecord_dict = record.model_dump()\nconfig_fields = [\"name\", \"description\", \"url\", \"kind\"]\nconfig_data = {k: v for k, v in record_dict.items() if k in config_fields}\nconfig = MetagitConfig(**config_data)\n</code></pre> <p>After:</p> <pre><code># Automatic field filtering\nconfig = record.to_metagit_config()\n</code></pre>"},{"location":"record_conversion/#future-enhancements","title":"Future Enhancements","text":"<p>The conversion methods are designed to be extensible:</p> <ol> <li>Custom Field Mapping: Support for custom field mapping rules</li> <li>Version Compatibility: Handle schema version differences</li> <li>Batch Conversion: Efficient conversion of multiple records</li> <li>Caching: Cache conversion results for repeated operations</li> </ol>"},{"location":"record_conversion/#troubleshooting","title":"Troubleshooting","text":""},{"location":"record_conversion/#common-issues","title":"Common Issues","text":"<ol> <li>Validation Errors: Ensure all required fields are present</li> <li>Field Mismatches: Check that field names match between models</li> <li>Type Errors: Verify that field types are compatible</li> </ol>"},{"location":"record_conversion/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging for conversion issues\nimport logging\nlogging.getLogger(\"metagit.core.record.models\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"record_conversion/#api-reference","title":"API Reference","text":"<p>For complete API documentation, see the docstrings in <code>metagit/core/record/models.py</code>.</p>"},{"location":"record_conversion/#contributing","title":"Contributing","text":"<p>When adding new fields to either <code>MetagitRecord</code> or <code>MetagitConfig</code>:</p> <ol> <li>Update the field mapping documentation</li> <li>Add tests for the new fields</li> <li>Ensure conversion methods handle the new fields correctly</li> <li>Update this documentation if needed </li> </ol>"},{"location":"repository_detection/","title":"Repository Detection","text":"<p>The repository detection module provides comprehensive analysis of git repositories, including language detection, project classification, branch analysis, CI/CD detection, and metrics collection.</p>"},{"location":"repository_detection/#features","title":"Features","text":"<ul> <li>Language Detection: Identifies primary and secondary programming languages, frameworks, and build tools</li> <li>Project Classification: Determines project type (application, library, CLI, etc.) and domain</li> <li>Branch Analysis: Detects branching strategies and analyzes branch patterns</li> <li>CI/CD Detection: Identifies CI/CD configurations and platforms</li> <li>Metrics Collection: Gathers repository metrics including stars, forks, issues, and contributor information</li> <li>Git Provider Integration: Supports real-time metrics from GitHub and GitLab APIs</li> <li>AppConfig Integration: Dynamic provider configuration through application settings</li> </ul>"},{"location":"repository_detection/#usage","title":"Usage","text":""},{"location":"repository_detection/#basic-repository-analysis","title":"Basic Repository Analysis","text":"<pre><code>from metagit.core.detect import DetectionManager\n\n# Analyze a local repository\nanalysis = DetectionManager.from_path(\"/path/to/repo\")\n\n# Analyze a remote repository (clones it temporarily)\nanalysis = DetectionManager.from_url(\"https://github.com/username/repo\")\n\n# Generate summary\nsummary = analysis.summary()\nprint(summary)\n\n# Convert to MetagitConfig\nconfig = analysis.to_metagit_config()\n</code></pre>"},{"location":"repository_detection/#cli-usage","title":"CLI Usage","text":"<pre><code># Analyze current directory\nmetagit detect repository\n\n# Analyze specific path\nmetagit detect repository --path /path/to/repo\n\n# Analyze remote repository\nmetagit detect repository --url https://github.com/username/repo\n\n# Save configuration to .metagit.yml\nmetagit detect repository --save\n\n# Output in different formats\nmetagit detect repository --output yaml\nmetagit detect repository --output json\n</code></pre>"},{"location":"repository_detection/#git-provider-plugins","title":"Git Provider Plugins","text":"<p>The repository detection system supports git provider plugins that enable fetching real-time metrics from hosting platforms like GitHub and GitLab.</p>"},{"location":"repository_detection/#supported-providers","title":"Supported Providers","text":"<ul> <li>GitHub: Fetches stars, forks, issues, pull requests, and contributor data</li> <li>GitLab: Fetches project statistics, merge requests, and member information</li> </ul>"},{"location":"repository_detection/#configuration-methods","title":"Configuration Methods","text":""},{"location":"repository_detection/#1-appconfig-recommended","title":"1. AppConfig (Recommended)","text":"<p>Configure providers through the application configuration file:</p> <pre><code># ~/.config/metagit/config.yml or metagit.config.yml\nconfig:\n  providers:\n    github:\n      enabled: true\n      api_token: \"ghp_your_github_token_here\"\n      base_url: \"https://api.github.com\"  # For GitHub Enterprise\n\n    gitlab:\n      enabled: false\n      api_token: \"glpat_your_gitlab_token_here\"\n      base_url: \"https://gitlab.com/api/v4\"  # For self-hosted GitLab\n</code></pre> <p>Benefits: - Persistent configuration across sessions - No need to set environment variables - Easy to manage multiple environments - Supports enterprise instances</p>"},{"location":"repository_detection/#2-environment-variables","title":"2. Environment Variables","text":"<p>Set API tokens as environment variables:</p> <pre><code>export GITHUB_TOKEN=\"your_github_personal_access_token\"\nexport GITLAB_TOKEN=\"your_gitlab_personal_access_token\"\n</code></pre>"},{"location":"repository_detection/#3-cli-options","title":"3. CLI Options","text":"<p>Override configuration for specific commands:</p> <pre><code># Use GitHub token\nmetagit detect repository --github-token \"your_token\"\n\n# Use GitLab token\nmetagit detect repository --gitlab-token \"your_token\"\n\n# Custom API URLs (for self-hosted instances)\nmetagit detect repository --github-url \"https://github.company.com/api/v3\"\nmetagit detect repository --gitlab-url \"https://gitlab.company.com/api/v4\"\n\n# Disable AppConfig and use environment variables only\nmetagit detect repository --use-app-config=false\n</code></pre>"},{"location":"repository_detection/#configuration-priority","title":"Configuration Priority","text":"<p>The system uses the following priority order for provider configuration:</p> <ol> <li>CLI Options (highest priority) - Override all other settings</li> <li>AppConfig - Persistent configuration from config files</li> <li>Environment Variables - Fallback for legacy support</li> </ol>"},{"location":"repository_detection/#provider-features","title":"Provider Features","text":""},{"location":"repository_detection/#github-provider","title":"GitHub Provider","text":"<ul> <li>Authentication: Personal Access Token</li> <li>Metrics: Stars, forks, open issues, pull requests, contributors</li> <li>Metadata: Repository description, topics, creation date, license</li> <li>URL Support: github.com, GitHub Enterprise</li> <li>Configuration: <code>providers.github.enabled</code>, <code>providers.github.api_token</code>, <code>providers.github.base_url</code></li> </ul>"},{"location":"repository_detection/#gitlab-provider","title":"GitLab Provider","text":"<ul> <li>Authentication: Personal Access Token</li> <li>Metrics: Star count, forks, open issues, merge requests, members</li> <li>Metadata: Project description, topics, visibility, namespace</li> <li>URL Support: gitlab.com, self-hosted GitLab</li> <li>Configuration: <code>providers.gitlab.enabled</code>, <code>providers.gitlab.api_token</code>, <code>providers.gitlab.base_url</code></li> </ul>"},{"location":"repository_detection/#fallback-behavior","title":"Fallback Behavior","text":"<p>When no provider is available or API calls fail, the system falls back to git-based metrics:</p> <ul> <li>Contributors: Counted from git commit history</li> <li>Commit Frequency: Calculated from recent commit patterns</li> <li>Stars/Forks/Issues: Set to 0 (requires API access)</li> </ul>"},{"location":"repository_detection/#detection-components","title":"Detection Components","text":""},{"location":"repository_detection/#language-detection","title":"Language Detection","text":"<p>Analyzes file extensions and content to identify:</p> <ul> <li>Primary Language: Most dominant programming language</li> <li>Secondary Languages: Other languages present</li> <li>Frameworks: React, Vue, Angular, Terraform, Kubernetes, etc.</li> <li>Package Managers: npm, pip, cargo, go.mod, etc.</li> <li>Build Tools: Make, Gradle, Maven, etc.</li> </ul>"},{"location":"repository_detection/#project-type-detection","title":"Project Type Detection","text":"<p>Classifies projects based on file patterns:</p> <ul> <li>Application: Web apps, mobile apps, desktop apps</li> <li>Library: Reusable code libraries</li> <li>CLI: Command-line tools</li> <li>Microservice: Containerized services</li> <li>Data Science: ML/AI projects with notebooks</li> <li>Infrastructure as Code: Terraform, CloudFormation, etc.</li> </ul>"},{"location":"repository_detection/#branch-analysis","title":"Branch Analysis","text":"<p>Detects branching strategies:</p> <ul> <li>Git Flow: Feature, develop, release, hotfix branches</li> <li>GitHub Flow: Simple main branch with feature branches</li> <li>GitLab Flow: Environment-based branching</li> <li>Trunk-Based Development: Single main branch</li> <li>Custom: Other branching patterns</li> </ul>"},{"location":"repository_detection/#cicd-detection","title":"CI/CD Detection","text":"<p>Identifies CI/CD configurations:</p> <ul> <li>GitHub Actions: <code>.github/workflows/</code></li> <li>GitLab CI: <code>.gitlab-ci.yml</code></li> <li>CircleCI: <code>.circleci/config.yml</code></li> <li>Jenkins: <code>Jenkinsfile</code></li> <li>Travis CI: <code>.travis.yml</code></li> </ul>"},{"location":"repository_detection/#metrics-collection","title":"Metrics Collection","text":"<p>Gathers repository statistics:</p> <ul> <li>Stars: Repository stars/watches</li> <li>Forks: Repository forks</li> <li>Open Issues: Number of open issues</li> <li>Pull Requests: Open and recently merged PRs</li> <li>Contributors: Number of contributors</li> <li>Commit Frequency: Daily, weekly, or monthly activity</li> </ul>"},{"location":"repository_detection/#output-formats","title":"Output Formats","text":""},{"location":"repository_detection/#summary-output","title":"Summary Output","text":"<p>Human-readable summary of all detected information:</p> <pre><code>Repository Analysis Summary\nPath: /path/to/repo\nURL: https://github.com/username/repo\nGit Repository: True\nPrimary Language: Python\nSecondary Languages: JavaScript, Shell\nFrameworks: React, Terraform\nPackage Managers: pip, npm\nProject Type: application\nDomain: web\nConfidence: 0.85\nBranch Strategy: GitHub Flow\nNumber of Branches: 3\nCI/CD Tool: GitHub Actions\nContributors: 5\nCommit Frequency: weekly\nStars: 42\nForks: 12\nOpen Issues: 3\nOpen PRs: 1\nPRs Merged (30d): 8\nMetrics Source: GitHub API\nHas Docker: True\nHas Tests: True\nHas Documentation: True\nHas Infrastructure as Code: True\n</code></pre>"},{"location":"repository_detection/#yaml-output","title":"YAML Output","text":"<p>Structured YAML configuration:</p> <pre><code>name: \"My Project\"\ndescription: \"A sample project\"\nurl: \"https://github.com/username/repo\"\nkind: \"application\"\nlicense:\n  kind: \"mit\"\n  file: \"LICENSE\"\nmaintainers:\n  - name: \"John Doe\"\n    email: \"john@example.com\"\n    role: \"Maintainer\"\nbranch_strategy: \"github_flow\"\ntaskers:\n  - kind: \"taskfile\"\nbranches:\n  - name: \"main\"\n  - name: \"develop\"\n  - name: \"feature/new-feature\"\ncicd:\n  platform: \"github\"\n  pipelines:\n    - name: \"CI\"\n      ref: \".github/workflows/ci.yml\"\nmetrics:\n  stars: 42\n  forks: 12\n  open_issues: 3\n  pull_requests:\n    open: 1\n    merged_last_30d: 8\n  contributors: 5\n  commit_frequency: \"weekly\"\nmetadata:\n  default_branch: \"main\"\n  has_ci: true\n  has_tests: true\n  has_docs: true\n  has_docker: true\n  has_iac: true\n  created_at: \"2024-01-01T00:00:00\"\n  last_commit_at: \"2024-01-15T12:00:00\"\nworkspace:\n  projects:\n    - name: \"default\"\n      repos:\n        - name: \"My Project\"\n          path: \"/path/to/repo\"\n          url: \"https://github.com/username/repo\"\n</code></pre>"},{"location":"repository_detection/#examples","title":"Examples","text":""},{"location":"repository_detection/#basic-analysis","title":"Basic Analysis","text":"<pre><code>from metagit.core.detect import DetectionManager\n\n# Analyze current directory\nanalysis = DetectionManager.from_path(\".\")\n\n# Print summary\nprint(analysis.summary())\n\n# Get configuration\nconfig = analysis.to_metagit_config()\n</code></pre>"},{"location":"repository_detection/#with-appconfig-integration","title":"With AppConfig Integration","text":"<pre><code>from metagit.core.detect import DetectionManager\nfrom metagit.core.appconfig import AppConfig\nfrom metagit.core.providers import registry\n\n# Load AppConfig and configure providers\napp_config = AppConfig.load()\nregistry.configure_from_app_config(app_config)\n\n# Analyze repository (will use configured providers for metrics)\nanalysis = DetectionManager.from_path(\".\")\nprint(analysis.summary())\n</code></pre>"},{"location":"repository_detection/#with-manual-provider-configuration","title":"With Manual Provider Configuration","text":"<pre><code>from metagit.core.detect import DetectionManager\nfrom metagit.core.providers.github import GitHubProvider\nfrom metagit.core.providers import registry\n\n# Setup GitHub provider manually\nprovider = GitHubProvider(api_token=\"ghp_...\")\nregistry.register(provider)\n\n# Analyze repository\nanalysis = DetectionManager.from_path(\".\")\nprint(analysis.summary())\n</code></pre>"},{"location":"repository_detection/#cli-with-appconfig","title":"CLI with AppConfig","text":"<pre><code># Create AppConfig file\nmkdir -p ~/.config/metagit\ncat &gt; ~/.config/metagit/config.yml &lt;&lt; EOF\nconfig:\n  providers:\n    github:\n      enabled: true\n      api_token: \"ghp_...\"\n    gitlab:\n      enabled: false\n      api_token: \"\"\nEOF\n\n# Analyze with AppConfig providers\nmetagit detect repository --path /path/to/repo --output summary\n\n# Save configuration with real metrics\nmetagit detect repository --path /path/to/repo --save\n</code></pre>"},{"location":"repository_detection/#cli-with-environment-variables","title":"CLI with Environment Variables","text":"<pre><code># Set environment variables\nexport GITHUB_TOKEN=\"ghp_...\"\nexport GITLAB_TOKEN=\"glpat-...\"\n\n# Analyze with environment providers\nmetagit detect repository --path /path/to/repo --output summary\n\n# Disable AppConfig and use environment only\nmetagit detect repository --use-app-config=false --path /path/to/repo\n</code></pre>"},{"location":"repository_detection/#error-handling","title":"Error Handling","text":"<p>The detection system gracefully handles errors:</p> <ul> <li>Missing Files: Skips analysis of missing files/directories</li> <li>API Failures: Falls back to git-based metrics</li> <li>Invalid Repositories: Returns appropriate error messages</li> <li>Network Issues: Continues with local analysis</li> <li>Configuration Errors: Falls back to environment variables or defaults</li> </ul>"},{"location":"repository_detection/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Local Analysis: Fast, no network required</li> <li>Provider API Calls: May add 1-3 seconds for metrics</li> <li>Large Repositories: Analysis time scales with repository size</li> <li>Caching: No built-in caching (consider implementing for repeated analysis)</li> <li>Configuration Loading: AppConfig is loaded once per command execution </li> </ul>"},{"location":"terminology/","title":"Metagit Terminology","text":"<p>IT has a way with words doesn't it? This is a short list of metagit terms and their concise meaning to reduce confusion.</p> <p>Path (aka. Target) - A folder within a git repository.</p> <p>Repo - A git repository. If it happens to be a monorepo there maybe several targets within the repository with unique associated metadata.</p> <p>Project - A collection of git repositories. In VSCode this is a workspace. We define a project at this higher level than the repository because we want a more holistic view of what your code entails as a whole. While a repo maybe produces a single app it may have several internal/external dependencies that make up the whole of what it requires to deploy it.</p> <p>Workspace - A collection of projects. Fundamentally different than a VSCode workspace. For metagit the most important thing to understand is that this is the target folder where all projects and their repos will be cloned/copied into.</p> <p>This creates a hierarchy like the following:</p> <pre><code>Workspace/\n\u2514\u2500\u2500 ProjectA/\n    \u2514\u2500\u2500 RepoA1/\n        \u251c\u2500\u2500 Path1\n        \u2514\u2500\u2500 Path2\n    \u2514\u2500\u2500 RepoA2/\n        \u2514\u2500\u2500 Path1\n\u2514\u2500\u2500 ProjectB/\n    \u2514\u2500\u2500 RepoB1/\n        \u251c\u2500\u2500 Path1\n        \u2514\u2500\u2500 Path2\n    \u2514\u2500\u2500 RepoB2/\n      \u2514\u2500\u2500 Path1\n</code></pre> <p>NOTE It is entirely possible to have the same repo referenced in multiple projects. Local paths defined this way will simply be soft links. Multiple project repositories defined this way will be treated independently.</p>"}]}