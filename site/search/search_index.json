{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Metagit","text":"<p>Metagit is situational awareness for developers made easy. Metagit can make multi-repo projects feel more like a monorepo and provide information on the software stacks within.</p> Table of Contents   * [Metagit](#metagit) * [About](#about)   * [Audience](#audience)   * [Metagit is NOT...](#metagit-is-not)     * [...an SBOM Tool](#an-sbom-tool)     * [...a git Client](#a-git-client)   * [How It Works](#how-it-works) * [Modes](#modes)   * [Workspace Mode](#workspace-mode)   * [Metadata Mode](#metadata-mode)   * [Metadata+ Mode](#metadata-mode-1)   * [Enterprise (TBD)](#enterprise-tbd)   * [Installation](#installation) * [Usage](#usage)     * [Initialize a Repository](#initialize-a-repository)     * [Project Commands](#project-commands)       * [Detect Project Settings](#detect-project-settings)     * [Workspace Commands](#workspace-commands)       * [Synchronize Workspace](#synchronize-workspace) * [Configuration](#configuration)   * [Contributing](#contributing)   * [License](#license) * [Configuration](#configuration-1) * [Use](#use) * [Development](#development)   * [MCP Servers](#mcp-servers)"},{"location":"#about","title":"About","text":"<p>This tool is well suited for a number of scenarios including;</p> <ol> <li>At-a-glance view of a project's technical stacks, languages, external dependencies, and generated artifacts.</li> <li>Rapid pivoting between numerous git projects throughout the day while still maintaining a steady clip of productivity.</li> <li>Isolating outside dependencies that weaken the security and dependability of your cicd pipelines.</li> <li>Automated documentation of a code's provenance.</li> <li>As a new contributor to a project or team, get from zero to first code commit in as little time as possible.</li> </ol> <p>Metagit aims to provide situational awareness for developers, SREs, AI agents, and engineers on the git projects they work in every day. It is meant to shed light on the numerous interconnected dependencies that comprise the whole of the entire solution being worked on in a single easily read and updated file.</p>"},{"location":"#audience","title":"Audience","text":"<p>This tool targets;</p> <ul> <li>DevOps Engineers</li> <li>Polyglot developers</li> <li>New team members</li> <li>Project Managers</li> <li>SREs</li> <li>Solution Engineers</li> <li>AI Agents (more to come!)</li> </ul>"},{"location":"#metagit-is-not","title":"Metagit is NOT...","text":""},{"location":"#an-sbom-tool","title":"...an SBOM Tool","text":"<p>SBOM output can be thousands of lines long and encompass all the software dependencies, their transitive dependencies, and  more. This is too much for the simple need of situational awareness and AI integration. As such, a comprehensive software bill of materials is overkill for the goals outlined above. The development roadmap may include the ability to read in sbom manifests as a data source though!</p> <p>Metagit makes extensive use of CI library definitions (like go.mod, packages.json, requirements.txt, et cetera) for detection and boundary validations. Such files will be used to help determine technology stacks in use but not extensive versioning or other deep information.</p>"},{"location":"#a-git-client","title":"...a git Client","text":"<p>Despite the name this tool still requires git and all the trappings of a git hosting solution.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>This app accesses and saves project configuration metadata within the repository as a .metagit.yml file (or in a hosted tenant). The data within a project follows a schema that can be read via the cli.</p> <p>If using this tool to simply manage several dozen git repos (aka. an umbrella repo) then everything within the configuration file can be manually updated. You can also attempt to automatically update the file using a mix of standard heuristics and AI driven workflows.</p>"},{"location":"#modes","title":"Modes","text":"<p>This application will have multiple modes of operation as described below.</p>"},{"location":"#workspace-mode","title":"Workspace Mode","text":"<p>This mode is the first planned release feature as an open source cli tool.</p> <p>In this mode users stitch together various repositories that comprise the components of a project into one workspace that can be loaded via vscode or accessed individually via fast context switching at the console.</p> <p>AKA Multi-repo as Monorepo</p> <p>In this mode you are using metagit as a means to externally track and work with multiple git projects as a whole. One top level 'umbrella' project has the only metagit definition file which contains definitions for all related git repos and local target folders in the current project. Optionally you then sync the project to your local workstation.</p> <p>The metagit configuration file is then be checked into version control as a stand-alone project.</p> <p>This mode is ideal for;</p> <ul> <li>Simply trying out metagit</li> <li>Creating umbrella projects for new team members of a multi-repo project</li> <li>Individual power users that need to quickly pivot between several git project repositories that comprise a larger team effort</li> <li>Keeping loosely coupled git projects grouped together to work on without having to deal with git submodules (yuk)</li> </ul>"},{"location":"#metadata-mode","title":"Metadata Mode","text":"<p>This mode uses the same config file that workspace mode employs but with additional information about the project's primary language, frameworks, and other situational awareness information you always wish you had at hand when diving into a new project. This mode can be used in tandem with workspace mode.</p> <p>To configure this metadata for a single project by hand would be easy. To do so for several dozen or even thousands of repos is a no small task. Towards that end, metagit will include detection heuristics to automate a good deal of this task. What cannot be done easily through code initially will be done with AI.</p> <p>NOTE This too will need to be actively monitored by other AI agents to convert into static code over time.</p> <p>In this mode, metagit would be used to answer questions such as;</p> <ul> <li>What other projects are related to this project?</li> <li>What application and development stacks does this project use?</li> <li>What external dependencies exist for this project?</li> <li>What artifacts does this project create?</li> <li>What branch strategy is employed?</li> <li>What version strategy is employed?</li> </ul> <p>External Dependencies are the devil! If you ever experienced a pipeline that suddenly fails due to a missing outside/external dependency you know exactly why they stink.</p>"},{"location":"#metadata-mode_1","title":"Metadata+ Mode","text":"<p>All the prior metadata is incredibly useful already. But if we add context around this then we are cooking with gas! If we setup basic organization boundaries like owned registries or github/gitlab groups we can then start looking for fragile pipelines or  This can be done easily through a central configuration file or SaaS offering. This </p>"},{"location":"#enterprise-tbd","title":"Enterprise (TBD)","text":"<p>Enterprise mode is using metagit at scale.</p> <p>In this mode metagit connects to our enterprise SaaS offering to help mine the whole of your organization's code assets continuously.</p> <ul> <li>Imagine if you could mine your entire organization's copious amounts of code repos for the exact thing you need for your own project? </li> <li>How many times do wheels get recreated simply because you cannot find the artifact needed for your own project even though you know it must exist? </li> <li>How much time is wasted looking for a project using your language and framework to use as a starting point for your own efforts?</li> <li>How frustrated do you get when, after putting in days or weeks of effort to create something you find another internal project that does it twice as elegantly that was done 6 months ago by another team? Enterprise mode of metagit aims to target this issue head on.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install metagit, clone the repository and build the project:</p> <pre><code>git clone https://github.com/zloeber/metagit.git\ncd metagit\n\n./configure.sh\ntask build\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#initialize-a-repository","title":"Initialize a Repository","text":"<p>To initialize a new metagit configuration in your current Git repository, run:</p> <pre><code>./metagit init\n</code></pre> <p>This command will check if the current directory is a Git repository and create a <code>metagit.yaml</code> configuration file if it does not exist. It will also ensure that <code>.metagit</code> is added to your <code>.gitignore</code>.</p>"},{"location":"#project-commands","title":"Project Commands","text":"<p>To work with project settings, use the project command:</p> <pre><code>./metagit project\n</code></pre>"},{"location":"#detect-project-settings","title":"Detect Project Settings","text":"<p>To detect project configurations, run:</p> <pre><code>./metagit project detect\n</code></pre>"},{"location":"#workspace-commands","title":"Workspace Commands","text":"<p>To manage workspace settings, use the workspace command:</p> <pre><code>./metagit workspace\n</code></pre>"},{"location":"#synchronize-workspace","title":"Synchronize Workspace","text":"<p>To sync workspace settings, run:</p> <pre><code>./metagit workspace sync\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>The default configuration file is <code>metagit.config.yaml</code>, which can be customized to suit your project's needs.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request for any enhancements or bug fixes.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#configuration_1","title":"Configuration","text":"<p><code>./.configure.sh</code></p>"},{"location":"#use","title":"Use","text":"<pre><code>uv run -m metagit.cli.main\n\n# Show current config\nuv run -m metagit.cli.main appconfig show\n\n# Dump new/default config\nuv run -m metagit.cli.main appconfig create\n\n# Run generic detection for current path\nuv run -m metagit.cli.main detect repo\n</code></pre>"},{"location":"#development","title":"Development","text":""},{"location":"#mcp-servers","title":"MCP Servers","text":"<p>Sequential Thinking</p>"},{"location":"cli_reference/","title":"CLI Reference","text":"<p>This page contains the auto-generated documentation for the <code>metagit</code> command-line interface.</p>"},{"location":"cli_reference/#metagit","title":"metagit","text":"<p>Metagit CLI: A multi-purpose CLI tool with YAML configuration.</p> <p>Usage:</p> <pre><code>metagit [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version                 Show the version and exit.\n  --config TEXT             Path to the configuration file\n  --debug / --no-debug      Enable or disable debug mode\n  --verbose / --no-verbose  Enable or disable verbose output\n  -h, --help                Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#appconfig","title":"appconfig","text":"<p>Application configuration subcommands</p> <p>Usage:</p> <pre><code>metagit appconfig [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create","title":"create","text":"<p>Create default application config</p> <p>Usage:</p> <pre><code>metagit appconfig create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#get","title":"get","text":"<p>Display appconfig value</p> <p>Usage:</p> <pre><code>metagit appconfig get [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --name TEXT    Appconfig element to target\n  --show-keys    If the element is a dictionary, show all key names. If it is a list, show all name attributes\n  --output TEXT  Output format (json/yaml)\n  -h, --help     Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show","title":"show","text":"<p>Show current configuration</p> <p>Usage:</p> <pre><code>metagit appconfig show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#validate","title":"validate","text":"<p>Validate a configuration file</p> <p>Usage:</p> <pre><code>metagit appconfig validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#config","title":"config","text":"<p>Configuration subcommands</p> <p>Usage:</p> <pre><code>metagit config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the metagit configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create_1","title":"create","text":"<p>Create metagit config files</p> <p>Usage:</p> <pre><code>metagit config create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --output-path TEXT  Path to the metagit configuration file\n  --name TEXT         Project name\n  --description TEXT  Project description\n  --url TEXT          Project URL\n  --kind TEXT         Project kind\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show_1","title":"show","text":"<p>Show metagit configuration</p> <p>Usage:</p> <pre><code>metagit config show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#validate_1","title":"validate","text":"<p>Validate metagit configuration</p> <p>Usage:</p> <pre><code>metagit config validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#detect","title":"detect","text":"<p>Detection subcommands</p> <p>Usage:</p> <pre><code>metagit detect [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repo","title":"repo","text":"<p>Detect the codebase.</p> <p>Usage:</p> <pre><code>metagit detect repo [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --repo-path TEXT  Path to the git repository to analyze.  [default: ./]\n  --output TEXT     Output format.  [default: yaml]\n  -h, --help        Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#info","title":"info","text":"<p>Display the current configuration.</p> <p>Usage:</p> <pre><code>metagit info [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#init","title":"init","text":"<p>Initialize local metagit environment by creating .metagit.yml and updating .gitignore</p> <p>Usage:</p> <pre><code>metagit init [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -f, --force  Force overwrite of existing .metagit.yml file\n  -h, --help   Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#project","title":"project","text":"<p>Project subcommands</p> <p>Usage:</p> <pre><code>metagit project [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -c, --config TEXT   Path to the metagit definition file\n  -p, --project TEXT  Project within workspace to operate on\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#list","title":"list","text":"<p>List the current project configuration in YAML format</p> <p>Usage:</p> <pre><code>metagit project list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repo_1","title":"repo","text":"<p>Repository subcommands</p> <p>Usage:</p> <pre><code>metagit project repo [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#add","title":"add","text":"<p>Add a repository to the current project</p> <p>Usage:</p> <pre><code>metagit project repo add [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --name TEXT                     Repository name\n  --description TEXT              Repository description\n  --kind [monorepo|umbrella|application|gitops|infrastructure|service|library|website|other|docker_image|repository]\n                                  Project kind\n  --ref TEXT                      Reference in the current project for the target project\n  --path TEXT                     Local project path\n  --branches TEXT                 Project branches (can be specified multiple times)\n  --url TEXT                      Repository URL\n  --sync / --no-sync              Sync setting\n  --language TEXT                 Programming language\n  --language-version TEXT         Language version\n  --package-manager TEXT          Package manager\n  --frameworks TEXT               Frameworks used (can be specified multiple times)\n  --prompt                        Use interactive prompts instead of command line parameters\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select","title":"select","text":"<p>Select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit project repo select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select_1","title":"select","text":"<p>Shortcut: Uses 'project repo select' to select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit project select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#sync","title":"sync","text":"<p>Sync project within workspace</p> <p>Usage:</p> <pre><code>metagit project sync [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#version","title":"version","text":"<p>Get the application version.</p> <p>Usage:</p> <pre><code>metagit version [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#workspace","title":"workspace","text":"<p>Workspace subcommands</p> <p>Usage:</p> <pre><code>metagit workspace [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --config TEXT  Path to the metagit definition file\n  -h, --help     Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select_2","title":"select","text":"<p>Select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit workspace select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --project TEXT  Project within workspace to select target paths from\n  -h, --help      Show this message and exit.\n</code></pre>"},{"location":"terminology/","title":"Metagit Terminology","text":"<p>IT has a way with words doesn't it? This is a short list of metagit terms and their concise meaning to reduce confusion.</p> <p>Path (aka. Target) - A folder within a git repository. Repo - A git repository. If it happens to be a monorepo there maybe several targets within the repository with unique associated metadata. Project - A collection of git repositories. In VSCode this is a workspace. We define a project at this higher level than the repository because we want a more holistic view of what your code entails as a whole. While a repo maybe produces a single app it may have several internal/external dependencies that make up the whole of what it requires to deploy it. Workspace - A collection of projects. Fundamentally different than a VSCode workspace.</p> <p>This creates a hierarchy like the following:</p> <pre><code>Workspace\n  -- ProjectA\n    -- RepoA1\n      -- Path1\n      -- Path2\n    -- RepoA2\n      -- Path1\n  -- ProjectB\n    -- RepoB1\n      -- Path1\n      -- Path2\n    -- RepoB2\n      -- Path1\n</code></pre> <p>It is entirely possible to have the same repo referenced in multiple projects.</p> <pre><code>Workspace\n  -- ProjectA\n    -- RepoA1\n      -- Path1\n      -- Path2\n    -- RepoA2\n      -- Path1\n  -- ProjectB\n    -- RepoB1\n      -- Path1\n      -- Path2\n    -- RepoA2\n      -- Path1\n</code></pre>"}]}