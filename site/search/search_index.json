{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Metagit","text":"<p>Metagit is situational awareness for developers made easy. Metagit can make multi-repo projects feel more like a monorepo and provide information on the software stacks within.</p>"},{"location":"#about","title":"About","text":"<p>This tool is well suited for a number of scenarios including;</p> <ol> <li>At-a-glance view of a project's technical stacks, languages, external dependencies, and generated artifacts.</li> <li>Rapid pivoting between numerous git projects throughout the day while still maintaining a steady clip of productivity.</li> <li>Isolating outside dependencies that weaken the security and dependability of your cicd pipelines.</li> <li>Automated documentation of a code's provenance.</li> <li>As a new contributor to a project or team, get from zero to first code commit in as little time as possible.</li> </ol> <p>Metagit aims to provide situational awareness for developers, SREs, AI agents, and engineers on the git projects they work in every day. It is meant to shed light on the numerous interconnected dependencies that comprise the whole of the entire solution being worked on in a single easily read and updated file.</p>"},{"location":"#audience","title":"Audience","text":"<p>This tool targets;</p> <ul> <li>DevOps Engineers</li> <li>Polyglot developers</li> <li>New team members</li> <li>Project Managers</li> <li>SREs</li> <li>Solution Engineers</li> <li>AI Agents (more to come!)</li> </ul>"},{"location":"#metagit-is-not","title":"Metagit is NOT...","text":""},{"location":"#an-sbom-tool","title":"...an SBOM Tool","text":"<p>SBOM output can be thousands of lines long and encompass all the software dependencies, their transitive dependencies, and  more. This is too much for the simple need of situational awareness and AI integration. As such, a comprehensive software bill of materials is overkill for the goals outlined above. The development roadmap may include the ability to read in sbom manifests as a data source though!</p> <p>Metagit makes extensive use of CI library definitions (like go.mod, packages.json, requirements.txt, et cetera) for detection and boundary validations. Such files will be used to help determine technology stacks in use but not extensive versioning or other deep information.</p>"},{"location":"#a-git-client","title":"...a git Client","text":"<p>Despite the name this tool still requires git and all the trappings of a git hosting solution.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>This app accesses and saves project configuration metadata within the repository as a .metagit.yml file (or in a hosted tenant). The data within a project follows a schema that can be read via the cli.</p> <p>If using this tool to simply manage several dozen git repos (aka. an umbrella repo) then everything within the configuration file can be manually updated. You can also attempt to automatically update the file using a mix of standard heuristics and AI driven workflows.</p>"},{"location":"#modes","title":"Modes","text":"<p>This application will have multiple modes of operation as described below.</p>"},{"location":"#workspace-mode","title":"Workspace Mode","text":"<p>This mode is the first planned release feature as an open source cli tool.</p> <p>In this mode users stitch together various repositories that comprise the components of a project into one workspace that can be loaded via vscode or accessed individually via fast context switching at the console.</p> <p>AKA Multi-repo as Monorepo</p> <p>In this mode you are using metagit as a means to externally track and work with multiple git projects as a whole. One top level 'umbrella' project has the only metagit definition file which contains definitions for all related git repos and local target folders in the current project. Optionally you then sync the project to your local workstation.</p> <p>The metagit configuration file is then be checked into version control as a stand-alone project.</p> <p>This mode is ideal for;</p> <ul> <li>Simply trying out metagit</li> <li>Creating umbrella projects for new team members of a multi-repo project</li> <li>Individual power users that need to quickly pivot between several git project repositories that comprise a larger team effort</li> <li>Keeping loosely coupled git projects grouped together to work on without having to deal with git submodules (yuk)</li> </ul>"},{"location":"#metadata-mode","title":"Metadata Mode","text":"<p>This mode uses the same config file that workspace mode employs but with additional information about the project's primary language, frameworks, and other situational awareness information you always wish you had at hand when diving into a new project. This mode can be used in tandem with workspace mode.</p> <p>To configure this metadata for a single project by hand would be easy. To do so for several dozen or even thousands of repos is a no small task. Towards that end, metagit will include detection heuristics to automate a good deal of this task. What cannot be done easily through code initially will be done with AI.</p> <p>NOTE This too will need to be actively monitored by other AI agents to convert into static code over time.</p> <p>In this mode, metagit would be used to answer questions such as;</p> <ul> <li>What other projects are related to this project?</li> <li>What application and development stacks does this project use?</li> <li>What external dependencies exist for this project?</li> <li>What artifacts does this project create?</li> <li>What branch strategy is employed?</li> <li>What version strategy is employed?</li> </ul> <p>External Dependencies are the devil! If you ever experienced a pipeline that suddenly fails due to a missing outside/external dependency you know exactly why they stink.</p>"},{"location":"#metadata-mode_1","title":"Metadata+ Mode","text":"<p>All the prior metadata is incredibly useful already. But if we add context around this then we are cooking with gas! If we setup basic organization boundaries like owned registries or github/gitlab groups we can then start looking for fragile pipelines or  This can be done easily through a central configuration file or SaaS offering. This </p>"},{"location":"#enterprise-tbd","title":"Enterprise (TBD)","text":"<p>Enterprise mode is using metagit at scale.</p> <p>In this mode metagit connects to our enterprise SaaS offering to help mine the whole of your organization's code assets continuously.</p> <ul> <li>Imagine if you could mine your entire organization's copious amounts of code repos for the exact thing you need for your own project? </li> <li>How many times do wheels get recreated simply because you cannot find the artifact needed for your own project even though you know it must exist? </li> <li>How much time is wasted looking for a project using your language and framework to use as a starting point for your own efforts?</li> <li>How frustrated do you get when, after putting in days or weeks of effort to create something you find another internal project that does it twice as elegantly that was done 6 months ago by another team? Enterprise mode of metagit aims to target this issue head on.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install metagit, clone the repository and build the project:</p> <pre><code>git clone https://github.com/zloeber/metagit.git\ncd metagit\n\n./configure.sh\ntask build\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#initialize-a-repository","title":"Initialize a Repository","text":"<p>To initialize a new metagit configuration in your current Git repository, run:</p> <pre><code>./metagit init\n</code></pre> <p>This command will check if the current directory is a Git repository and create a <code>metagit.yaml</code> configuration file if it does not exist. It will also ensure that <code>.metagit</code> is added to your <code>.gitignore</code>.</p>"},{"location":"#project-commands","title":"Project Commands","text":"<p>To work with project settings, use the project command:</p> <pre><code>./metagit project\n</code></pre>"},{"location":"#detect-project-settings","title":"Detect Project Settings","text":"<p>To detect project configurations, run:</p> <pre><code>./metagit project detect\n</code></pre>"},{"location":"#workspace-commands","title":"Workspace Commands","text":"<p>To manage workspace settings, use the workspace command:</p> <pre><code>./metagit workspace\n</code></pre>"},{"location":"#synchronize-workspace","title":"Synchronize Workspace","text":"<p>To sync workspace settings, run:</p> <pre><code>./metagit workspace sync\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>The default configuration file is <code>metagit.config.yaml</code>, which can be customized to suit your project's needs.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request for any enhancements or bug fixes.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#configuration_1","title":"Configuration","text":"<p><code>./.configure.sh</code></p>"},{"location":"#use","title":"Use","text":"<pre><code>uv run -m metagit.cli.main\n\n# Show current config\nuv run -m metagit.cli.main appconfig show\n\n# Dump new/default config\nuv run -m metagit.cli.main appconfig create\n\n# Run generic detection for current path\nuv run -m metagit.cli.main detect repo\n</code></pre>"},{"location":"#development","title":"Development","text":""},{"location":"#mcp-servers","title":"MCP Servers","text":"<p>Sequential Thinking</p>"},{"location":"cli_reference/","title":"CLI Reference","text":"<p>This page contains the auto-generated documentation for the <code>metagit</code> command-line interface.</p>"},{"location":"cli_reference/#metagit","title":"metagit","text":"<p>Metagit CLI: A multi-purpose CLI tool with YAML configuration.</p> <p>Usage:</p> <pre><code>metagit [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version                 Show the version and exit.\n  --config TEXT             Path to the configuration file\n  --debug / --no-debug      Enable or disable debug mode\n  --verbose / --no-verbose  Enable or disable verbose output\n  -h, --help                Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#appconfig","title":"appconfig","text":"<p>Application configuration subcommands</p> <p>Usage:</p> <pre><code>metagit appconfig [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create","title":"create","text":"<p>Create default application config</p> <p>Usage:</p> <pre><code>metagit appconfig create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#get","title":"get","text":"<p>Display appconfig value</p> <p>Usage:</p> <pre><code>metagit appconfig get [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --name TEXT    Appconfig element to target\n  --show-keys    If the element is a dictionary, show all key names. If it is a list, show all name attributes\n  --output TEXT  Output format (json/yaml)\n  -h, --help     Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show","title":"show","text":"<p>Show current configuration</p> <p>Usage:</p> <pre><code>metagit appconfig show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#validate","title":"validate","text":"<p>Validate a configuration file</p> <p>Usage:</p> <pre><code>metagit appconfig validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#config","title":"config","text":"<p>Configuration subcommands</p> <p>Usage:</p> <pre><code>metagit config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT  Path to the metagit configuration file\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#create_1","title":"create","text":"<p>Create metagit config files</p> <p>Usage:</p> <pre><code>metagit config create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --output-path TEXT  Path to the metagit configuration file\n  --name TEXT         Project name\n  --description TEXT  Project description\n  --url TEXT          Project URL\n  --kind TEXT         Project kind\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#init","title":"init","text":"<p>Initialize AppConfig with default settings.</p> <p>Usage:</p> <pre><code>metagit config init [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --config-path TEXT   Path to save configuration file (default: ~/.config/metagit/config.yml).\n  --github-token TEXT  GitHub API token to include in initial configuration.\n  --gitlab-token TEXT  GitLab API token to include in initial configuration.\n  -h, --help           Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#providers","title":"providers","text":"<p>Manage git provider plugin configuration.</p> <p>Usage:</p> <pre><code>metagit config providers [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --show               Show current provider configuration.\n  --enable-github      Enable GitHub provider.\n  --disable-github     Disable GitHub provider.\n  --enable-gitlab      Enable GitLab provider.\n  --disable-gitlab     Disable GitLab provider.\n  --github-token TEXT  Set GitHub API token.\n  --gitlab-token TEXT  Set GitLab API token.\n  --github-url TEXT    Set GitHub API base URL (for GitHub Enterprise).\n  --gitlab-url TEXT    Set GitLab API base URL (for self-hosted GitLab).\n  --config-path TEXT   Path to configuration file (default: ~/.config/metagit/config.yml).\n  -h, --help           Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show_1","title":"show","text":"<p>Show metagit configuration</p> <p>Usage:</p> <pre><code>metagit config show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#validate_1","title":"validate","text":"<p>Validate metagit configuration</p> <p>Usage:</p> <pre><code>metagit config validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#detect","title":"detect","text":"<p>Detection subcommands</p> <p>Usage:</p> <pre><code>metagit detect [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repo","title":"repo","text":"<p>Detect the codebase.</p> <p>Usage:</p> <pre><code>metagit detect repo [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --repo-path TEXT  Path to the git repository to analyze.  [default: ./]\n  --output TEXT     Output format.  [default: yaml]\n  -h, --help        Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repository","title":"repository","text":"<p>Comprehensive repository analysis and MetagitConfig generation.</p> <p>Usage:</p> <pre><code>metagit detect repository [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --path TEXT                   Path to local repository to analyze.\n  --url TEXT                    URL of remote git repository to clone and analyze.\n  --output [summary|yaml|json]  Output format. Defaults to 'summary' if --save is not used.\n  --save                        Save the generated configuration to .metagit.yml in the repository path.\n  --temp-dir TEXT               Temporary directory for cloning remote repositories.\n  --github-token TEXT           GitHub API token for fetching repository metrics (overrides AppConfig).\n  --gitlab-token TEXT           GitLab API token for fetching repository metrics (overrides AppConfig).\n  --github-url TEXT             GitHub API base URL (for GitHub Enterprise, overrides AppConfig).\n  --gitlab-url TEXT             GitLab API base URL (for self-hosted GitLab, overrides AppConfig).\n  --use-app-config              Use AppConfig for provider configuration (default: True).\n  -h, --help                    Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#info","title":"info","text":"<p>Display the current configuration.</p> <p>Usage:</p> <pre><code>metagit info [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#init_1","title":"init","text":"<p>Initialize local metagit environment by creating .metagit.yml and updating .gitignore</p> <p>Usage:</p> <pre><code>metagit init [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -f, --force  Force overwrite of existing .metagit.yml file\n  -h, --help   Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#project","title":"project","text":"<p>Project subcommands</p> <p>Usage:</p> <pre><code>metagit project [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -c, --config TEXT   Path to the metagit definition file\n  -p, --project TEXT  Project within workspace to operate on\n  -h, --help          Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#list","title":"list","text":"<p>List the current project configuration in YAML format</p> <p>Usage:</p> <pre><code>metagit project list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#repo_1","title":"repo","text":"<p>Repository subcommands</p> <p>Usage:</p> <pre><code>metagit project repo [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#add","title":"add","text":"<p>Add a repository to the current project</p> <p>Usage:</p> <pre><code>metagit project repo add [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --name TEXT                     Repository name\n  --description TEXT              Repository description\n  --kind [monorepo|umbrella|application|gitops|infrastructure|service|library|website|other|docker_image|repository|cli]\n                                  Project kind\n  --ref TEXT                      Reference in the current project for the target project\n  --path TEXT                     Local project path\n  --url TEXT                      Repository URL\n  --sync / --no-sync              Sync setting\n  --language TEXT                 Programming language\n  --language-version TEXT         Language version\n  --package-manager TEXT          Package manager\n  --frameworks TEXT               Frameworks used (can be specified multiple times)\n  --prompt                        Use interactive prompts instead of command line parameters\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select","title":"select","text":"<p>Select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit project repo select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select_1","title":"select","text":"<p>Shortcut: Uses 'project repo select' to select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit project select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#sync","title":"sync","text":"<p>Sync project within workspace</p> <p>Usage:</p> <pre><code>metagit project sync [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#version","title":"version","text":"<p>Get the application version.</p> <p>Usage:</p> <pre><code>metagit version [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#workspace","title":"workspace","text":"<p>Workspace subcommands</p> <p>Usage:</p> <pre><code>metagit workspace [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --config TEXT  Path to the metagit definition file\n  -h, --help     Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#select_2","title":"select","text":"<p>Select workspace project repo to work on</p> <p>Usage:</p> <pre><code>metagit workspace select [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --project TEXT  Project within workspace to select target paths from\n  -h, --help      Show this message and exit.\n</code></pre>"},{"location":"multi_tenancy/","title":"Multi-Tenancy Support","text":"<p>Metagit now supports multi-tenancy, allowing you to isolate data and operations for different tenants (organizations, teams, or customers) within a single deployment.</p>"},{"location":"multi_tenancy/#overview","title":"Overview","text":"<p>Multi-tenancy in Metagit provides:</p> <ul> <li>Data Isolation: Each tenant's records are completely isolated from other tenants</li> <li>Access Control: Tenants can only access their own data</li> <li>Configurable: Can be enabled/disabled via configuration</li> <li>Backward Compatible: Existing functionality remains unchanged when disabled</li> <li>Flexible: Supports both header-based and query parameter-based tenant identification</li> </ul>"},{"location":"multi_tenancy/#configuration","title":"Configuration","text":""},{"location":"multi_tenancy/#enable-multi-tenancy","title":"Enable Multi-Tenancy","text":"<p>To enable multi-tenancy, update your <code>metagit.config.yaml</code>:</p> <pre><code>config:\n  version: \"1.0.0\"\n\n  # Tenant configuration\n  tenant:\n    enabled: true\n    default_tenant: \"default\"\n    tenant_header: \"X-Tenant-ID\"\n    tenant_required: true\n    allowed_tenants:\n      - \"tenant-a\"\n      - \"tenant-b\"\n      - \"tenant-c\"\n      - \"default\"\n\n  # ... rest of your configuration\n</code></pre>"},{"location":"multi_tenancy/#configuration-options","title":"Configuration Options","text":"Option Type Default Description <code>enabled</code> boolean <code>false</code> Whether multi-tenancy is enabled <code>default_tenant</code> string <code>\"default\"</code> Default tenant ID when none specified <code>tenant_header</code> string <code>\"X-Tenant-ID\"</code> HTTP header name for tenant ID <code>tenant_required</code> boolean <code>true</code> Whether tenant ID is required <code>allowed_tenants</code> list <code>[]</code> List of allowed tenant IDs (empty = all allowed)"},{"location":"multi_tenancy/#environment-variables","title":"Environment Variables","text":"<p>You can also configure multi-tenancy via environment variables:</p> <pre><code># Enable multi-tenancy\nexport METAGIT_TENANT_ENABLED=true\n\n# Set default tenant\nexport METAGIT_TENANT_DEFAULT=my-tenant\n\n# Custom header name\nexport METAGIT_TENANT_HEADER=X-Custom-Tenant\n\n# Make tenant optional\nexport METAGIT_TENANT_REQUIRED=false\n\n# Allowed tenants (comma-separated)\nexport METAGIT_TENANT_ALLOWED=tenant-a,tenant-b,tenant-c\n</code></pre>"},{"location":"multi_tenancy/#usage","title":"Usage","text":""},{"location":"multi_tenancy/#api-requests","title":"API Requests","text":"<p>When multi-tenancy is enabled, you must include a tenant identifier in your API requests.</p>"},{"location":"multi_tenancy/#using-http-headers-recommended","title":"Using HTTP Headers (Recommended)","text":"<pre><code># Submit detection for specific tenant\ncurl -X POST \"http://localhost:8000/detect/submit\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Tenant-ID: tenant-a\" \\\n  -d '{\n    \"repository_url\": \"https://github.com/example/repo\"\n  }'\n\n# Search records for specific tenant\ncurl -X POST \"http://localhost:8000/records/search\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Tenant-ID: tenant-a\" \\\n  -d '{\n    \"query\": \"test\"\n  }'\n</code></pre>"},{"location":"multi_tenancy/#using-query-parameters","title":"Using Query Parameters","text":"<pre><code># Submit detection with tenant in query parameter\ncurl -X POST \"http://localhost:8000/detect/submit?tenant_id=tenant-a\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"repository_url\": \"https://github.com/example/repo\"\n  }'\n\n# Search records with tenant in query parameter\ncurl -X POST \"http://localhost:8000/records/search?tenant_id=tenant-a\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"test\"\n  }'\n</code></pre>"},{"location":"multi_tenancy/#request-models","title":"Request Models","text":"<p>You can also include tenant information in request models:</p> <pre><code>from metagit.api.models import DetectionRequest\n\n# Include tenant in request\nrequest = DetectionRequest(\n    repository_url=\"https://github.com/example/repo\",\n    tenant_id=\"tenant-a\",\n    priority=1,\n    metadata={\"source\": \"api\"}\n)\n</code></pre>"},{"location":"multi_tenancy/#python-client-example","title":"Python Client Example","text":"<pre><code>import requests\n\n# Configure client with tenant\nclass MetagitClient:\n    def __init__(self, base_url, tenant_id):\n        self.base_url = base_url\n        self.headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Tenant-ID\": tenant_id\n        }\n\n    def submit_detection(self, repository_url):\n        response = requests.post(\n            f\"{self.base_url}/detect/submit\",\n            headers=self.headers,\n            json={\"repository_url\": repository_url}\n        )\n        return response.json()\n\n    def search_records(self, query):\n        response = requests.post(\n            f\"{self.base_url}/records/search\",\n            headers=self.headers,\n            json={\"query\": query}\n        )\n        return response.json()\n\n# Usage\nclient = MetagitClient(\"http://localhost:8000\", \"tenant-a\")\nresult = client.submit_detection(\"https://github.com/example/repo\")\n</code></pre>"},{"location":"multi_tenancy/#data-isolation","title":"Data Isolation","text":""},{"location":"multi_tenancy/#opensearch-records","title":"OpenSearch Records","text":"<p>When multi-tenancy is enabled, all MetagitRecord entries include a <code>tenant_id</code> field:</p> <pre><code>{\n  \"_id\": \"record-123\",\n  \"_source\": {\n    \"tenant_id\": \"tenant-a\",\n    \"name\": \"example-repo\",\n    \"url\": \"https://github.com/example/repo\",\n    \"kind\": \"repository\",\n    \"@timestamp\": \"2024-01-01T00:00:00Z\",\n    // ... other fields\n  }\n}\n</code></pre>"},{"location":"multi_tenancy/#detection-jobs","title":"Detection Jobs","text":"<p>Detection jobs are also tenant-aware:</p> <pre><code># Each detection job includes tenant context\n{\n  \"detection_id\": \"job-123\",\n  \"repository_url\": \"https://github.com/example/repo\",\n  \"tenant_id\": \"tenant-a\",\n  \"status\": \"pending\",\n  \"created_at\": \"2024-01-01T00:00:00Z\",\n  \"updated_at\": \"2024-01-01T00:00:00Z\"\n}\n</code></pre>"},{"location":"multi_tenancy/#security-features","title":"Security Features","text":""},{"location":"multi_tenancy/#tenant-validation","title":"Tenant Validation","text":"<ul> <li>Required Tenants: When <code>tenant_required=true</code>, requests without tenant ID are rejected</li> <li>Allowed Tenants: When <code>allowed_tenants</code> is configured, only listed tenants are accepted</li> <li>Access Control: Tenants can only access their own data</li> </ul>"},{"location":"multi_tenancy/#error-responses","title":"Error Responses","text":"<pre><code>// Missing tenant ID\n{\n  \"detail\": \"Tenant ID required. Use header 'X-Tenant-ID' or query parameter 'tenant_id'\"\n}\n\n// Unauthorized tenant\n{\n  \"detail\": \"Tenant 'unauthorized-tenant' not authorized. Allowed tenants: tenant-a, tenant-b, tenant-c\"\n}\n\n// Access denied\n{\n  \"detail\": \"Record record-123 not found or access denied\"\n}\n</code></pre>"},{"location":"multi_tenancy/#migration","title":"Migration","text":""},{"location":"multi_tenancy/#from-single-tenant-to-multi-tenant","title":"From Single-Tenant to Multi-Tenant","text":"<ol> <li>Backup your data before enabling multi-tenancy</li> <li>Update configuration to enable multi-tenancy</li> <li>Restart the service - existing data will remain accessible via the default tenant</li> <li>Update clients to include tenant headers/parameters</li> </ol>"},{"location":"multi_tenancy/#existing-data","title":"Existing Data","text":"<ul> <li>Existing records will be accessible via the <code>default</code> tenant</li> <li>No data migration is required</li> <li>The <code>tenant_id</code> field will be automatically added to new records</li> </ul>"},{"location":"multi_tenancy/#best-practices","title":"Best Practices","text":""},{"location":"multi_tenancy/#tenant-naming","title":"Tenant Naming","text":"<ul> <li>Use consistent, descriptive tenant names</li> <li>Avoid special characters in tenant IDs</li> <li>Consider using UUIDs for tenant IDs in production</li> </ul>"},{"location":"multi_tenancy/#security","title":"Security","text":"<ul> <li>Always validate tenant IDs on the client side</li> <li>Use HTTPS in production</li> <li>Consider implementing additional authentication/authorization</li> <li>Regularly audit tenant access</li> </ul>"},{"location":"multi_tenancy/#performance","title":"Performance","text":"<ul> <li>Tenant filtering is handled at the database level</li> <li>No performance impact for single-tenant deployments</li> <li>Consider index optimization for large multi-tenant deployments</li> </ul>"},{"location":"multi_tenancy/#monitoring","title":"Monitoring","text":"<pre><code># Monitor tenant usage\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef log_tenant_access(tenant_id, operation):\n    logger.info(f\"Tenant {tenant_id} performed {operation}\")\n</code></pre>"},{"location":"multi_tenancy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"multi_tenancy/#common-issues","title":"Common Issues","text":"<ol> <li>403 Forbidden: Check if tenant is in <code>allowed_tenants</code> list</li> <li>400 Bad Request: Ensure tenant ID is provided when required</li> <li>404 Not Found: Verify tenant has access to the requested resource</li> </ol>"},{"location":"multi_tenancy/#debugging","title":"Debugging","text":"<p>Enable debug logging to see tenant context:</p> <pre><code>export LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"multi_tenancy/#testing","title":"Testing","text":"<p>Use the provided test suite to verify multi-tenant functionality:</p> <pre><code>pytest tests/test_tenant_config.py\npytest tests/test_tenant_middleware.py\npytest tests/test_tenant_services.py\n</code></pre>"},{"location":"multi_tenancy/#api-reference","title":"API Reference","text":""},{"location":"multi_tenancy/#endpoints","title":"Endpoints","text":"<p>All existing endpoints support multi-tenancy when enabled:</p> <ul> <li><code>POST /detect/submit</code> - Submit detection with tenant context</li> <li><code>GET /detect/{detection_id}/status</code> - Get detection status (tenant-verified)</li> <li><code>GET /detect</code> - List detections for current tenant</li> <li><code>POST /records/search</code> - Search records with tenant filtering</li> <li><code>GET /records/{record_id}</code> - Get record (tenant-verified)</li> <li><code>DELETE /records/{record_id}</code> - Delete record (tenant-verified)</li> </ul>"},{"location":"multi_tenancy/#headers","title":"Headers","text":"<ul> <li><code>X-Tenant-ID</code>: Tenant identifier (configurable name)</li> <li><code>Content-Type</code>: <code>application/json</code></li> </ul>"},{"location":"multi_tenancy/#query-parameters","title":"Query Parameters","text":"<ul> <li><code>tenant_id</code>: Alternative way to specify tenant identifier</li> </ul>"},{"location":"multi_tenancy/#examples","title":"Examples","text":"<p>See <code>examples/tenant_config_example.yml</code> for a complete configuration example. </p>"},{"location":"repository_detection/","title":"Repository Detection","text":"<p>The repository detection module provides comprehensive analysis of git repositories, including language detection, project classification, branch analysis, CI/CD detection, and metrics collection.</p>"},{"location":"repository_detection/#features","title":"Features","text":"<ul> <li>Language Detection: Identifies primary and secondary programming languages, frameworks, and build tools</li> <li>Project Classification: Determines project type (application, library, CLI, etc.) and domain</li> <li>Branch Analysis: Detects branching strategies and analyzes branch patterns</li> <li>CI/CD Detection: Identifies CI/CD configurations and platforms</li> <li>Metrics Collection: Gathers repository metrics including stars, forks, issues, and contributor information</li> <li>Git Provider Integration: Supports real-time metrics from GitHub and GitLab APIs</li> <li>AppConfig Integration: Dynamic provider configuration through application settings</li> </ul>"},{"location":"repository_detection/#usage","title":"Usage","text":""},{"location":"repository_detection/#basic-repository-analysis","title":"Basic Repository Analysis","text":"<pre><code>from metagit.core.detect.repository import RepositoryAnalysis\n\n# Analyze a local repository\nanalysis = RepositoryAnalysis.from_path(\"/path/to/repo\")\n\n# Analyze a remote repository (clones it temporarily)\nanalysis = RepositoryAnalysis.from_url(\"https://github.com/username/repo\")\n\n# Generate summary\nsummary = analysis.summary()\nprint(summary)\n\n# Convert to MetagitConfig\nconfig = analysis.to_metagit_config()\n</code></pre>"},{"location":"repository_detection/#cli-usage","title":"CLI Usage","text":"<pre><code># Analyze current directory\nmetagit detect repository\n\n# Analyze specific path\nmetagit detect repository --path /path/to/repo\n\n# Analyze remote repository\nmetagit detect repository --url https://github.com/username/repo\n\n# Save configuration to .metagit.yml\nmetagit detect repository --save\n\n# Output in different formats\nmetagit detect repository --output yaml\nmetagit detect repository --output json\n</code></pre>"},{"location":"repository_detection/#git-provider-plugins","title":"Git Provider Plugins","text":"<p>The repository detection system supports git provider plugins that enable fetching real-time metrics from hosting platforms like GitHub and GitLab.</p>"},{"location":"repository_detection/#supported-providers","title":"Supported Providers","text":"<ul> <li>GitHub: Fetches stars, forks, issues, pull requests, and contributor data</li> <li>GitLab: Fetches project statistics, merge requests, and member information</li> </ul>"},{"location":"repository_detection/#configuration-methods","title":"Configuration Methods","text":""},{"location":"repository_detection/#1-appconfig-recommended","title":"1. AppConfig (Recommended)","text":"<p>Configure providers through the application configuration file:</p> <pre><code># ~/.config/metagit/config.yml or metagit.config.yml\nconfig:\n  providers:\n    github:\n      enabled: true\n      api_token: \"ghp_your_github_token_here\"\n      base_url: \"https://api.github.com\"  # For GitHub Enterprise\n\n    gitlab:\n      enabled: false\n      api_token: \"glpat_your_gitlab_token_here\"\n      base_url: \"https://gitlab.com/api/v4\"  # For self-hosted GitLab\n</code></pre> <p>Benefits: - Persistent configuration across sessions - No need to set environment variables - Easy to manage multiple environments - Supports enterprise instances</p>"},{"location":"repository_detection/#2-environment-variables","title":"2. Environment Variables","text":"<p>Set API tokens as environment variables:</p> <pre><code>export GITHUB_TOKEN=\"your_github_personal_access_token\"\nexport GITLAB_TOKEN=\"your_gitlab_personal_access_token\"\n</code></pre>"},{"location":"repository_detection/#3-cli-options","title":"3. CLI Options","text":"<p>Override configuration for specific commands:</p> <pre><code># Use GitHub token\nmetagit detect repository --github-token \"your_token\"\n\n# Use GitLab token\nmetagit detect repository --gitlab-token \"your_token\"\n\n# Custom API URLs (for self-hosted instances)\nmetagit detect repository --github-url \"https://github.company.com/api/v3\"\nmetagit detect repository --gitlab-url \"https://gitlab.company.com/api/v4\"\n\n# Disable AppConfig and use environment variables only\nmetagit detect repository --use-app-config=false\n</code></pre>"},{"location":"repository_detection/#configuration-priority","title":"Configuration Priority","text":"<p>The system uses the following priority order for provider configuration:</p> <ol> <li>CLI Options (highest priority) - Override all other settings</li> <li>AppConfig - Persistent configuration from config files</li> <li>Environment Variables - Fallback for legacy support</li> </ol>"},{"location":"repository_detection/#provider-features","title":"Provider Features","text":""},{"location":"repository_detection/#github-provider","title":"GitHub Provider","text":"<ul> <li>Authentication: Personal Access Token</li> <li>Metrics: Stars, forks, open issues, pull requests, contributors</li> <li>Metadata: Repository description, topics, creation date, license</li> <li>URL Support: github.com, GitHub Enterprise</li> <li>Configuration: <code>providers.github.enabled</code>, <code>providers.github.api_token</code>, <code>providers.github.base_url</code></li> </ul>"},{"location":"repository_detection/#gitlab-provider","title":"GitLab Provider","text":"<ul> <li>Authentication: Personal Access Token</li> <li>Metrics: Star count, forks, open issues, merge requests, members</li> <li>Metadata: Project description, topics, visibility, namespace</li> <li>URL Support: gitlab.com, self-hosted GitLab</li> <li>Configuration: <code>providers.gitlab.enabled</code>, <code>providers.gitlab.api_token</code>, <code>providers.gitlab.base_url</code></li> </ul>"},{"location":"repository_detection/#fallback-behavior","title":"Fallback Behavior","text":"<p>When no provider is available or API calls fail, the system falls back to git-based metrics:</p> <ul> <li>Contributors: Counted from git commit history</li> <li>Commit Frequency: Calculated from recent commit patterns</li> <li>Stars/Forks/Issues: Set to 0 (requires API access)</li> </ul>"},{"location":"repository_detection/#detection-components","title":"Detection Components","text":""},{"location":"repository_detection/#language-detection","title":"Language Detection","text":"<p>Analyzes file extensions and content to identify:</p> <ul> <li>Primary Language: Most dominant programming language</li> <li>Secondary Languages: Other languages present</li> <li>Frameworks: React, Vue, Angular, Terraform, Kubernetes, etc.</li> <li>Package Managers: npm, pip, cargo, go.mod, etc.</li> <li>Build Tools: Make, Gradle, Maven, etc.</li> </ul>"},{"location":"repository_detection/#project-type-detection","title":"Project Type Detection","text":"<p>Classifies projects based on file patterns:</p> <ul> <li>Application: Web apps, mobile apps, desktop apps</li> <li>Library: Reusable code libraries</li> <li>CLI: Command-line tools</li> <li>Microservice: Containerized services</li> <li>Data Science: ML/AI projects with notebooks</li> <li>Infrastructure as Code: Terraform, CloudFormation, etc.</li> </ul>"},{"location":"repository_detection/#branch-analysis","title":"Branch Analysis","text":"<p>Detects branching strategies:</p> <ul> <li>Git Flow: Feature, develop, release, hotfix branches</li> <li>GitHub Flow: Simple main branch with feature branches</li> <li>GitLab Flow: Environment-based branching</li> <li>Trunk-Based Development: Single main branch</li> <li>Custom: Other branching patterns</li> </ul>"},{"location":"repository_detection/#cicd-detection","title":"CI/CD Detection","text":"<p>Identifies CI/CD configurations:</p> <ul> <li>GitHub Actions: <code>.github/workflows/</code></li> <li>GitLab CI: <code>.gitlab-ci.yml</code></li> <li>CircleCI: <code>.circleci/config.yml</code></li> <li>Jenkins: <code>Jenkinsfile</code></li> <li>Travis CI: <code>.travis.yml</code></li> </ul>"},{"location":"repository_detection/#metrics-collection","title":"Metrics Collection","text":"<p>Gathers repository statistics:</p> <ul> <li>Stars: Repository stars/watches</li> <li>Forks: Repository forks</li> <li>Open Issues: Number of open issues</li> <li>Pull Requests: Open and recently merged PRs</li> <li>Contributors: Number of contributors</li> <li>Commit Frequency: Daily, weekly, or monthly activity</li> </ul>"},{"location":"repository_detection/#output-formats","title":"Output Formats","text":""},{"location":"repository_detection/#summary-output","title":"Summary Output","text":"<p>Human-readable summary of all detected information:</p> <pre><code>Repository Analysis Summary\nPath: /path/to/repo\nURL: https://github.com/username/repo\nGit Repository: True\nPrimary Language: Python\nSecondary Languages: JavaScript, Shell\nFrameworks: React, Terraform\nPackage Managers: pip, npm\nProject Type: application\nDomain: web\nConfidence: 0.85\nBranch Strategy: GitHub Flow\nNumber of Branches: 3\nCI/CD Tool: GitHub Actions\nContributors: 5\nCommit Frequency: weekly\nStars: 42\nForks: 12\nOpen Issues: 3\nOpen PRs: 1\nPRs Merged (30d): 8\nMetrics Source: GitHub API\nHas Docker: True\nHas Tests: True\nHas Documentation: True\nHas Infrastructure as Code: True\n</code></pre>"},{"location":"repository_detection/#yaml-output","title":"YAML Output","text":"<p>Structured YAML configuration:</p> <pre><code>name: \"My Project\"\ndescription: \"A sample project\"\nurl: \"https://github.com/username/repo\"\nkind: \"application\"\nlicense:\n  kind: \"mit\"\n  file: \"LICENSE\"\nmaintainers:\n  - name: \"John Doe\"\n    email: \"john@example.com\"\n    role: \"Maintainer\"\nbranch_strategy: \"github_flow\"\ntaskers:\n  - kind: \"taskfile\"\nbranches:\n  - name: \"main\"\n  - name: \"develop\"\n  - name: \"feature/new-feature\"\ncicd:\n  platform: \"github\"\n  pipelines:\n    - name: \"CI\"\n      ref: \".github/workflows/ci.yml\"\nmetrics:\n  stars: 42\n  forks: 12\n  open_issues: 3\n  pull_requests:\n    open: 1\n    merged_last_30d: 8\n  contributors: 5\n  commit_frequency: \"weekly\"\nmetadata:\n  default_branch: \"main\"\n  has_ci: true\n  has_tests: true\n  has_docs: true\n  has_docker: true\n  has_iac: true\n  created_at: \"2024-01-01T00:00:00\"\n  last_commit_at: \"2024-01-15T12:00:00\"\nworkspace:\n  projects:\n    - name: \"default\"\n      repos:\n        - name: \"My Project\"\n          path: \"/path/to/repo\"\n          url: \"https://github.com/username/repo\"\n</code></pre>"},{"location":"repository_detection/#examples","title":"Examples","text":""},{"location":"repository_detection/#basic-analysis","title":"Basic Analysis","text":"<pre><code>from metagit.core.detect.repository import RepositoryAnalysis\n\n# Analyze current directory\nanalysis = RepositoryAnalysis.from_path(\".\")\n\n# Print summary\nprint(analysis.summary())\n\n# Get configuration\nconfig = analysis.to_metagit_config()\n</code></pre>"},{"location":"repository_detection/#with-appconfig-integration","title":"With AppConfig Integration","text":"<pre><code>from metagit.core.detect.repository import RepositoryAnalysis\nfrom metagit.core.appconfig import AppConfig\nfrom metagit.core.providers import registry\n\n# Load AppConfig and configure providers\napp_config = AppConfig.load()\nregistry.configure_from_app_config(app_config)\n\n# Analyze repository (will use configured providers for metrics)\nanalysis = RepositoryAnalysis.from_path(\".\")\nprint(analysis.summary())\n</code></pre>"},{"location":"repository_detection/#with-manual-provider-configuration","title":"With Manual Provider Configuration","text":"<pre><code>from metagit.core.detect.repository import RepositoryAnalysis\nfrom metagit.core.providers.github import GitHubProvider\nfrom metagit.core.providers import registry\n\n# Setup GitHub provider manually\nprovider = GitHubProvider(api_token=\"ghp_...\")\nregistry.register(provider)\n\n# Analyze repository\nanalysis = RepositoryAnalysis.from_path(\".\")\nprint(analysis.summary())\n</code></pre>"},{"location":"repository_detection/#cli-with-appconfig","title":"CLI with AppConfig","text":"<pre><code># Create AppConfig file\nmkdir -p ~/.config/metagit\ncat &gt; ~/.config/metagit/config.yml &lt;&lt; EOF\nconfig:\n  providers:\n    github:\n      enabled: true\n      api_token: \"ghp_...\"\n    gitlab:\n      enabled: false\n      api_token: \"\"\nEOF\n\n# Analyze with AppConfig providers\nmetagit detect repository --path /path/to/repo --output summary\n\n# Save configuration with real metrics\nmetagit detect repository --path /path/to/repo --save\n</code></pre>"},{"location":"repository_detection/#cli-with-environment-variables","title":"CLI with Environment Variables","text":"<pre><code># Set environment variables\nexport GITHUB_TOKEN=\"ghp_...\"\nexport GITLAB_TOKEN=\"glpat-...\"\n\n# Analyze with environment providers\nmetagit detect repository --path /path/to/repo --output summary\n\n# Disable AppConfig and use environment only\nmetagit detect repository --use-app-config=false --path /path/to/repo\n</code></pre>"},{"location":"repository_detection/#error-handling","title":"Error Handling","text":"<p>The detection system gracefully handles errors:</p> <ul> <li>Missing Files: Skips analysis of missing files/directories</li> <li>API Failures: Falls back to git-based metrics</li> <li>Invalid Repositories: Returns appropriate error messages</li> <li>Network Issues: Continues with local analysis</li> <li>Configuration Errors: Falls back to environment variables or defaults</li> </ul>"},{"location":"repository_detection/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Local Analysis: Fast, no network required</li> <li>Provider API Calls: May add 1-3 seconds for metrics</li> <li>Large Repositories: Analysis time scales with repository size</li> <li>Caching: No built-in caching (consider implementing for repeated analysis)</li> <li>Configuration Loading: AppConfig is loaded once per command execution </li> </ul>"},{"location":"terminology/","title":"Metagit Terminology","text":"<p>IT has a way with words doesn't it? This is a short list of metagit terms and their concise meaning to reduce confusion.</p> <p>Path (aka. Target) - A folder within a git repository. Repo - A git repository. If it happens to be a monorepo there maybe several targets within the repository with unique associated metadata. Project - A collection of git repositories. In VSCode this is a workspace. We define a project at this higher level than the repository because we want a more holistic view of what your code entails as a whole. While a repo maybe produces a single app it may have several internal/external dependencies that make up the whole of what it requires to deploy it. Workspace - A collection of projects. Fundamentally different than a VSCode workspace.</p> <p>This creates a hierarchy like the following:</p> <pre><code>Workspace\n  -- ProjectA\n    -- RepoA1\n      -- Path1\n      -- Path2\n    -- RepoA2\n      -- Path1\n  -- ProjectB\n    -- RepoB1\n      -- Path1\n      -- Path2\n    -- RepoB2\n      -- Path1\n</code></pre> <p>It is entirely possible to have the same repo referenced in multiple projects.</p> <pre><code>Workspace\n  -- ProjectA\n    -- RepoA1\n      -- Path1\n      -- Path2\n    -- RepoA2\n      -- Path1\n  -- ProjectB\n    -- RepoB1\n      -- Path1\n      -- Path2\n    -- RepoA2\n      -- Path1\n</code></pre>"}]}